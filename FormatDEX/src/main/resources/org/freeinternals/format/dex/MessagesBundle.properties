# Copyright 2021 Free Internals.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

msg_common_unrecognized = Unrecognized value

msg_dex_file_magic1 = The constant array/string DEX_FILE_MAGIC is the list of bytes that must appear at the beginning of a .dex file in order for it to be recognized as such. The value intentionally contains a newline ("\n" or 0x0a) and a null byte ("\0" or 0x00) in order to help in the detection of certain forms of corruption.
msg_dex_file_magic2 = The value also encodes a format version number as three decimal digits, which is expected to increase monotonically over time as the format evolves.

msg_header_item_checksum = adler32 checksum of the rest of the file (everything but magic and this field); used to detect file corruption
msg_header_item_signature = SHA-1 signature (hash) of the rest of the file (everything but magic, checksum, and this field); used to uniquely identify files
msg_header_item_file_size = size of the entire file (including the header), in bytes
msg_header_item_header_size = size of the header (this entire section), in bytes. This allows for at least a limited amount of backwards/forwards compatibility without invalidating the format.
msg_header_item_endian_tag = endianness tag. See discussion above under "ENDIAN_CONSTANT and REVERSE_ENDIAN_CONSTANT" for more details.
msg_header_item_link_size = size of the link section, or 0 if this file isn't statically linked
msg_header_item_link_off = offset from the start of the file to the link section, or 0 if link_size == 0. The offset, if non-zero, should be to an offset into the link_data section. The format of the data pointed at is left unspecified by this document; this header field (and the previous) are left as hooks for use by runtime implementations.
msg_header_item_map_off = offset from the start of the file to the map item. The offset, which must be non-zero, should be to an offset into the data section, and the data should be in the format specified by "map_list" below.
msg_header_item_string_ids_size = count of strings in the string identifiers list
msg_header_item_string_ids_off = offset from the start of the file to the string identifiers list, or 0 if string_ids_size == 0 (admittedly a strange edge case). The offset, if non-zero, should be to the start of the string_ids section.
msg_header_item_type_ids_size = count of elements in the type identifiers list, at most 65535
msg_header_item_type_ids_off = offset from the start of the file to the type identifiers list, or 0 if type_ids_size == 0 (admittedly a strange edge case). The offset, if non-zero, should be to the start of the type_ids section.
msg_header_item_proto_ids_size = count of elements in the prototype identifiers list, at most 65535
msg_header_item_proto_ids_off = offset from the start of the file to the prototype identifiers list, or 0 if proto_ids_size == 0 (admittedly a strange edge case). The offset, if non-zero, should be to the start of the proto_ids section.
msg_header_item_field_ids_size = count of elements in the field identifiers list
msg_header_item_field_ids_off = offset from the start of the file to the field identifiers list, or 0 if field_ids_size == 0. The offset, if non-zero, should be to the start of the field_ids section.
msg_header_item_method_ids_size = count of elements in the method identifiers list
msg_header_item_method_ids_off = offset from the start of the file to the method identifiers list, or 0 if method_ids_size == 0. The offset, if non-zero, should be to the start of the method_ids section.
msg_header_item_class_defs_size = count of elements in the class definitions list
msg_header_item_class_defs_off = offset from the start of the file to the class definitions list, or 0 if class_defs_size == 0 (admittedly a strange edge case). The offset, if non-zero, should be to the start of the class_defs section.
msg_header_item_data_size = Size of data section in bytes. Must be an even multiple of sizeof(uint).
msg_header_item_data_off = offset from the start of the file to the start of the data section.

msg_string_id_item__string_data_off = offset from the start of the file to the string data for this item. The offset should be to a location in the data section, and the data should be in the format specified by "string_data_item" below. There is no alignment requirement for the offset.
msg_string_data_item = Appears in the data section of the ELF file.
msg_string_data_item__utf16_size = size of this string, in UTF-16 code units (which is the "string length" in many systems). That is, this is the decoded length of the string. (The encoded length is implied by the position of the 0 byte.)
msg_string_data_item__data = a series of MUTF-8 code units (a.k.a. octets, a.k.a. bytes) followed by a byte of value 0. See "MUTF-8 (Modified UTF-8) Encoding" above for details and discussion about the data format.

msg_type_id_item__descriptor_idx = index into the string_ids list for the descriptor string of this type. The string must conform to the syntax for TypeDescriptor, defined above.

msg_proto_id_item__shorty_idx =index into the string_ids list for the short-form descriptor string of this prototype. The string must conform to the syntax for ShortyDescriptor, defined above, and must correspond to the return type and parameters of this item.
msg_proto_id_item__return_type_idx = index into the type_ids list for the return type of this prototype
msg_proto_id_item__parameters_off = offset from the start of the file to the list of parameter types for this prototype, or 0 if this prototype has no parameters. This offset, if non-zero, should be in the data section, and the data there should be in the format specified by "type_list" below. Additionally, there should be no reference to the type void in the list.

msg_field_id_item__class_idx = index into the type_ids list for the definer of this field. This must be a class type, and not an array or primitive type.
msg_field_id_item__type_idx = index into the type_ids list for the type of this field
msg_field_id_item__name_idx = index into the string_ids list for the name of this field. The string must conform to the syntax for MemberName, defined above.

msg_method_id_item__class_idx = index into the type_ids list for the definer of this method. This must be a class or array type, and not a primitive type.
msg_method_id_item__proto_idx = index into the proto_ids list for the prototype of this method
msg_method_id_item__name_idx = index into the string_ids list for the name of this method. The string must conform to the syntax for MemberName, defined above.

msg_class_def_item__class_idx = index into the type_ids list for this class. This must be a class type, and not an array or primitive type.
msg_class_def_item__access_flags = access flags for the class (public, final, etc.). See "access_flags Definitions" for details.
msg_class_def_item__superclass_idx = index into the type_ids list for the superclass, or the constant value NO_INDEX if this class has no superclass (i.e., it is a root class such as Object). If present, this must be a class type, and not an array or primitive type.
msg_class_def_item__interfaces_off = offset from the start of the file to the list of interfaces, or 0 if there are none. This offset should be in the data section, and the data there should be in the format specified by "type_list" below. Each of the elements of the list must be a class type (not an array or primitive type), and there must not be any duplicates.
msg_class_def_item__source_file_idx = index into the string_ids list for the name of the file containing the original source for (at least most of) this class, or the special value NO_INDEX to represent a lack of this information. The debug_info_item of any given method may override this source file, but the expectation is that most classes will only come from one source file.
msg_class_def_item__annotations_off = offset from the start of the file to the annotations structure for this class, or 0 if there are no annotations on this class. This offset, if non-zero, should be in the data section, and the data there should be in the format specified by "annotations_directory_item" below, with all items referring to this class as the definer.
msg_class_def_item__class_data_off = offset from the start of the file to the associated class data for this item, or 0 if there is no class data for this class. (This may be the case, for example, if this class is a marker interface.) The offset, if non-zero, should be in the data section, and the data there should be in the format specified by "class_data_item" below, with all items referring to this class as the definer.
msg_class_def_item__static_values_off = offset from the start of the file to the list of initial values for static fields, or 0 if there are none (and all static fields are to be initialized with 0 or null). This offset should be in the data section, and the data there should be in the format specified by "encoded_array_item" below. The size of the array must be no larger than the number of static fields declared by this class, and the elements correspond to the static fields in the same order as declared in the corresponding field_list. The type of each array element must match the declared type of its corresponding field. If there are fewer elements in the array than there are static fields, then the leftover fields are initialized with a type-appropriate 0 or null.

msg_call_site_id_item = appears in the call_site_ids section. <br /><br />alignment: 4 bytes.
msg_call_site_id_item__call_site_off = offset from the start of the file to call site definition. The offset should be in the data section, and the data there should be in the format specified by "call_site_item" below.

msg_call_site_item = The call_site_item is an encoded_array_item whose elements correspond to the arguments provided to a bootstrap linker method.<br /><br />appears in the data section. <br /><br />alignment: none (byte aligned).

msg_method_handle_item = appears in the method_handles section. <br /><br />alignment: 4 bytes.
msg_method_handle_item__method_handle_type = type of the method handle; see table below
msg_method_handle_item__field_or_method_id = Field or method id depending on whether the method handle type is an accessor or a method invoker
msg_method_handle_item__unused = (unused)

msg_class_data_item = referenced from class_def_item. <br /><br />appears in the data section. <br /><br />alignment: none (byte-aligned).
msg_class_data_item__static_fields_size = the number of static fields defined in this item
msg_class_data_item__instance_fields_size = the number of instance fields defined in this item
msg_class_data_item__direct_methods_size = the number of direct methods defined in this item
msg_class_data_item__virtual_methods_size = the number of virtual methods defined in this item
msg_class_data_item__static_fields = the defined static fields, represented as a sequence of encoded elements. The fields must be sorted by field_idx in increasing order.
msg_class_data_item__instance_fields = the defined instance fields, represented as a sequence of encoded elements. The fields must be sorted by field_idx in increasing order.
msg_class_data_item__direct_methods = the defined direct (any of static, private, or constructor) methods, represented as a sequence of encoded elements. The methods must be sorted by method_idx in increasing order.
msg_class_data_item__virtual_methods = the defined virtual (none of static, private, or constructor) methods, represented as a sequence of encoded elements. This list should not include inherited methods unless overridden by the class that this item represents. The methods must be sorted by method_idx in increasing order. The method_idx of a virtual method must not be the same as any direct method.

msg_encoded_field__field_idx_diff = index into the field_ids list for the identity of this field (includes the name and descriptor), represented as a difference from the index of previous element in the list. The index of the first element in a list is represented directly.
msg_encoded_field__access_flags = access flags for the field (public, final, etc.). See "access_flags Definitions" for details.

msg_encoded_method__method_idx_diff = index into the method_ids list for the identity of this method (includes the name and descriptor), represented as a difference from the index of previous element in the list. The index of the first element in a list is represented directly.
msg_encoded_method__access_flags = access flags for the method (public, final, etc.). See "access_flags Definitions" for details.
msg_encoded_method__code_off = offset from the start of the file to the code structure for this method, or 0 if this method is either abstract or native. The offset should be to a location in the data section. The format of the data is specified by "code_item" below.

msg_type_list = referenced from class_def_item and proto_id_item. <br /><br />appears in the data section<br /><br />alignment: 4 bytes
msg_type_list__size = size of the list, in entries
msg_type_list__list = elements of the list
msg_type_item__type_idx = index into the type_ids list

msg_code_item = referenced from encoded_method. <br /><br />appears in the data section. <br /><br />alignment: 4 bytes
msg_code_item__registers_size = the number of registers used by this code
msg_code_item__ins_size = the number of words of incoming arguments to the method that this code is for
msg_code_item__outs_size = the number of words of outgoing argument space required by this code for method invocation
msg_code_item__tries_size = the number of try_items for this instance. If non-zero, then these appear as the tries array just after the insns in this instance.
msg_code_item__debug_info_off = offset from the start of the file to the debug info (line numbers + local variable info) sequence for this code, or 0 if there simply is no information. The offset, if non-zero, should be to a location in the data section. The format of the data is specified by "debug_info_item" below.
msg_code_item__insns_size = size of the instructions list, in 16-bit code units
msg_code_item__insns = actual array of bytecode. The format of code in an insns array is specified by the companion document Dalvik bytecode. Note that though this is defined as an array of ushort, there are some internal structures that prefer four-byte alignment. Also, if this happens to be in an endian-swapped file, then the swapping is only done on individual ushorts and not on the larger internal structures.
msg_code_item__padding = two bytes of padding to make tries four-byte aligned. This element is only present if tries_size is non-zero and insns_size is odd.
msg_code_item__tries = array indicating where in the code exceptions are caught and how to handle them. Elements of the array must be non-overlapping in range and in order from low to high address. This element is only present if tries_size is non-zero.
msg_code_item__handlers = bytes representing a list of lists of catch types and associated handler addresses. Each try_item has a byte-wise offset into this structure. This element is only present if tries_size is non-zero.

msg_try_item__start_addr = start address of the block of code covered by this entry. The address is a count of 16-bit code units to the start of the first covered instruction.
msg_try_item__insn_count = number of 16-bit code units covered by this entry. The last code unit covered (inclusive) is start_addr + insn_count - 1.
msg_try_item__handler_off = offset in bytes from the start of the associated encoded_catch_hander_list to the encoded_catch_handler for this entry. This must be an offset to the start of an encoded_catch_handler.

msg_encoded_catch_handler_list__size = size of this list, in entries
msg_encoded_catch_handler_list__list = actual list of handler lists, represented directly (not as offsets), and concatenated sequentially

msg_encoded_catch_handler__size = number of catch types in this list. If non-positive, then this is the negative of the number of catch types, and the catches are followed by a catch-all handler. For example: A size of 0 means that there is a catch-all but no explicitly typed catches. A size of 2 means that there are two explicitly typed catches and no catch-all. And a size of -1 means that there is one typed catch along with a catch-all.
msg_encoded_catch_handler__handlers = stream of abs(size) encoded items, one for each caught type, in the order that the types should be tested.
msg_encoded_catch_handler__catch_all_addr = bytecode address of the catch-all handler. This element is only present if size is non-positive.

msg_encoded_type_addr_pair__type_idx = index into the type_ids list for the type of the exception to catch
msg_encoded_type_addr_pair__addr = bytecode address of the associated exception handler

msg_debug_info_item = Each debug_info_item defines a DWARF3-inspired byte-coded state machine that, when interpreted, emits the positions table and (potentially) the local variable information for a code_item. The sequence begins with a variable-length header (the length of which depends on the number of method parameters), is followed by the state machine bytecodes, and ends with an DBG_END_SEQUENCE byte. <br /><br />referenced from code_item<br /><br />appears in the data section<br /><br />alignment: none (byte-aligned)
msg_debug_info_item__line_start = the initial value for the state machine's line register. Does not represent an actual positions entry.
msg_debug_info_item__parameters_size = the number of parameter names that are encoded. There should be one per method parameter, excluding an instance method's this, if any.
msg_debug_info_item__parameter_names = string index of the method parameter name. An encoded value of NO_INDEX indicates that no name is available for the associated parameter. The type descriptor and signature are implied from the method descriptor and signature.

msg_annotations_directory_item = referenced from class_def_item<br /><br />appears in the data section<br /><br />alignment: 4 bytes
msg_annotations_directory_item__class_annotations_off = offset from the start of the file to the annotations made directly on the class, or 0 if the class has no direct annotations. The offset, if non-zero, should be to a location in the data section. The format of the data is specified by "annotation_set_item" below.
msg_annotations_directory_item__fields_size = count of fields annotated by this item
msg_annotations_directory_item__annotated_methods_size = count of methods annotated by this item
msg_annotations_directory_item__annotated_parameters_size = count of method parameter lists annotated by this item
msg_annotations_directory_item__field_annotations = list of associated field annotations. The elements of the list must be sorted in increasing order, by field_idx.
msg_annotations_directory_item__method_annotations = list of associated method annotations. The elements of the list must be sorted in increasing order, by method_idx.
msg_annotations_directory_item__parameter_annotations = list of associated method parameter annotations. The elements of the list must be sorted in increasing order, by method_idx.

msg_field_annotation__field_idx = index into the field_ids list for the identity of the field being annotated
msg_field_annotation__annotations_off = offset from the start of the file to the list of annotations for the field. The offset should be to a location in the data section. The format of the data is specified by "annotation_set_item" below.

msg_method_annotation__method_idx = index into the method_ids list for the identity of the method being annotated
msg_method_annotation__annotations_off = offset from the start of the file to the list of annotations for the method. The offset should be to a location in the data section. The format of the data is specified by "annotation_set_item" below.

msg_parameter_annotation__method_idx = index into the method_ids list for the identity of the method whose parameters are being annotated
msg_parameter_annotation__annotations_off = offset from the start of the file to the list of annotations for the method parameters. The offset should be to a location in the data section. The format of the data is specified by "annotation_set_ref_list" below.

msg_annotation_set_ref_list = referenced from parameter_annotations_item<br /><br />appears in the data section<br /><br />alignment: 4 bytes
msg_annotation_set_ref_list__size = size of the list, in entries
msg_annotation_set_ref_list__list = elements of the list
msg_annotation_set_ref_item__annotations_off = offset from the start of the file to the referenced annotation set or 0 if there are no annotations for this element. The offset, if non-zero, should be to a location in the data section. The format of the data is specified by "annotation_set_item" below.

msg_annotation_set_item = referenced from annotations_directory_item, field_annotations_item, method_annotations_item, and annotation_set_ref_item<br /><br />appears in the data section<br /><br />alignment: 4 bytes
msg_annotation_set_item__size = size of the set, in entries
msg_annotation_set_item__entries = elements of the set. The elements must be sorted in increasing order, by type_idx.
msg_annotation_off_item__annotation_off = offset from the start of the file to an annotation. The offset should be to a location in the data section, and the format of the data at that location is specified by "annotation_item" below.

msg_annotation_item = referenced from annotation_set_item<br /><br />appears in the data section<br /><br />alignment: none (byte-aligned)
msg_annotation_item__visibility = intended visibility of this annotation (see below)
msg_annotation_item__visibility_build = intended only to be visible at build time (e.g., during compilation of other code)
msg_annotation_item__visibility_runtime = intended to visible at runtime
msg_annotation_item__visibility_system = intended to visible at runtime, but only to the underlying system (and not to regular user code)
msg_annotation_item__annotation = encoded annotation contents, in the format described by "encoded_annotation format" under "encoded_value encoding" above.

msg_encoded_value = An encoded_value is an encoded piece of (nearly) arbitrary hierarchically structured data. The encoding is meant to be both compact and straightforward to parse.<br /><br />embedded in annotation_element and encoded_array_item
msg_encoded_value__value_type = byte indicating the type of the immediately subsequent value along with an optional clarifying argument in the high-order three bits. See below for the various value definitions.
msg_encoded_value__value_arg =  In most cases, value_arg encodes the length of the immediately-subsequent value in bytes, as (size - 1), e.g., 0 means that the value requires one byte, and 7 means it requires eight bytes; however, there are exceptions as noted below.
msg_encoded_value__value = bytes representing the value, variable in length and interpreted differently for different value_type bytes, though always little-endian. See the various value definitions below for details.
msg_encoded_value__value_byte = signed one-byte integer value
msg_encoded_value__value_short = signed two-byte integer value, sign-extended
msg_encoded_value__value_char = unsigned two-byte integer value, zero-extended
msg_encoded_value__value_int = signed four-byte integer value, sign-extended
msg_encoded_value__value_long = signed eight-byte integer value, sign-extended
msg_encoded_value__value_float = four-byte bit pattern, zero-extended to the right, and interpreted as an IEEE754 32-bit floating point value
msg_encoded_value__value_double = eight-byte bit pattern, zero-extended to the right, and interpreted as an IEEE754 64-bit floating point value
msg_encoded_value__value_method_type = unsigned (zero-extended) four-byte integer value, interpreted as an index into the proto_ids section and representing a method type value
msg_encoded_value__value_method_handle = unsigned (zero-extended) four-byte integer value, interpreted as an index into the method_handles section and representing a method handle value
msg_encoded_value__value_string = unsigned (zero-extended) four-byte integer value, interpreted as an index into the string_ids section and representing a string value
msg_encoded_value__type = unsigned (zero-extended) four-byte integer value, interpreted as an index into the type_ids section and representing a reflective type/class value
msg_encoded_value__value_field = unsigned (zero-extended) four-byte integer value, interpreted as an index into the field_ids section and representing a reflective field value
msg_encoded_value__value_method = unsigned (zero-extended) four-byte integer value, interpreted as an index into the method_ids section and representing a reflective method value
msg_encoded_value__value_enum = unsigned (zero-extended) four-byte integer value, interpreted as an index into the field_ids section and representing the value of an enumerated type constant
msg_encoded_value__value_array = an array of values, in the format specified by "encoded_array format" below. The size of the value is implicit in the encoding.
msg_encoded_value__value_annotation = a sub-annotation, in the format specified by "encoded_annotation format" below. The size of the value is implicit in the encoding.
msg_encoded_value__value_null = null reference value
msg_encoded_value__value_boolean = one-bit value; 0 for false and 1 for true. The bit is represented in the value_arg.

msg_encoded_array_item = referenced from class_def_item<br /><br />appears in the data section<br /><br />alignment: none (byte-aligned)
msg_encoded_array_item__value = bytes representing the encoded array value, in the format specified by "encoded_array Format" under "encoded_value Encoding" above.
msg_encoded_array__size = number of elements in the array
msg_encoded_array__values = a series of size encoded_value byte sequences in the format specified by this section, concatenated sequentially.

msg_encoded_annotation__type_idx = type of the annotation. This must be a class (not array or primitive) type.
msg_encoded_annotation__size = number of name-value mappings in this annotation
msg_encoded_annotation__elements = elements of the annotation, represented directly in-line (not as offsets). Elements must be sorted in increasing order by string_id index.

msg_annotation_element__name_idx = element name, represented as an index into the string_ids section. The string must conform to the syntax for MemberName, defined above.
msg_annotation_element__value = element value

msg_hiddenapi_class_data_item =  This section contains data on restricted interfaces used by each class.
msg_hiddenapi_class_data_item__size = total size of the section
msg_hiddenapi_class_data_item__offsets = array of offsets indexed by class_idx. A zero array entry at index class_idx means that either there is no data for this class_idx, or all hidden API flags are zero. Otherwise the array entry is non-zero and contains an offset from the beginning of the section to an array of hidden API flags for this class_idx.
msg_hiddenapi_class_data_item__flags = concatenated arrays of hidden API flags for each class. Possible flag values are described in the table below. Flags are encoded in the same order as fields and methods are encoded in class data.
