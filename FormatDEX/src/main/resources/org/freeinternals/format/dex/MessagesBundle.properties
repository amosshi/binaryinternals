# Copyright 2021 Free Internals.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


msg_header_item_checksum = adler32 checksum of the rest of the file (everything but magic and this field); used to detect file corruption
msg_header_item_signature = SHA-1 signature (hash) of the rest of the file (everything but magic, checksum, and this field); used to uniquely identify files 
msg_header_item_file_size = size of the entire file (including the header), in bytes 
msg_header_item_header_size = size of the header (this entire section), in bytes. This allows for at least a limited amount of backwards/forwards compatibility without invalidating the format.
msg_header_item_endian_tag = endianness tag. See discussion above under "ENDIAN_CONSTANT and REVERSE_ENDIAN_CONSTANT" for more details.
msg_header_item_link_size = size of the link section, or 0 if this file isn't statically linked
msg_header_item_link_off = offset from the start of the file to the link section, or 0 if link_size == 0. The offset, if non-zero, should be to an offset into the link_data section. The format of the data pointed at is left unspecified by this document; this header field (and the previous) are left as hooks for use by runtime implementations.
msg_header_item_map_off = offset from the start of the file to the map item. The offset, which must be non-zero, should be to an offset into the data section, and the data should be in the format specified by "map_list" below. 
msg_header_item_string_ids_size = count of strings in the string identifiers list
msg_header_item_string_ids_off = offset from the start of the file to the string identifiers list, or 0 if string_ids_size == 0 (admittedly a strange edge case). The offset, if non-zero, should be to the start of the string_ids section. 
msg_header_item_type_ids_size = count of elements in the type identifiers list, at most 65535
msg_header_item_type_ids_off = offset from the start of the file to the type identifiers list, or 0 if type_ids_size == 0 (admittedly a strange edge case). The offset, if non-zero, should be to the start of the type_ids section. 
msg_header_item_proto_ids_size = count of elements in the prototype identifiers list, at most 65535
msg_header_item_proto_ids_off = offset from the start of the file to the prototype identifiers list, or 0 if proto_ids_size == 0 (admittedly a strange edge case). The offset, if non-zero, should be to the start of the proto_ids section. 
msg_header_item_field_ids_size = count of elements in the field identifiers list
msg_header_item_field_ids_off = offset from the start of the file to the field identifiers list, or 0 if field_ids_size == 0. The offset, if non-zero, should be to the start of the field_ids section.
msg_header_item_method_ids_size = count of elements in the method identifiers list
msg_header_item_method_ids_off = offset from the start of the file to the method identifiers list, or 0 if method_ids_size == 0. The offset, if non-zero, should be to the start of the method_ids section.
msg_header_item_class_defs_size = count of elements in the class definitions list
msg_header_item_class_defs_off = offset from the start of the file to the class definitions list, or 0 if class_defs_size == 0 (admittedly a strange edge case). The offset, if non-zero, should be to the start of the class_defs section. 
msg_header_item_data_size = Size of data section in bytes. Must be an even multiple of sizeof(uint).
msg_header_item_data_off = offset from the start of the file to the start of the data section. 
