/*
 * method_info.java    4:01 AM, August 5, 2007
 *
 * Copyright  2007, FreeInternals.org. All rights reserved.
 * Use is subject to license terms.
 */
package org.freeinternals.format.classfile;

import java.io.IOException;
import javax.swing.tree.DefaultMutableTreeNode;
import org.freeinternals.commonlib.core.BytesTool;
import org.freeinternals.commonlib.core.FileComponent;
import org.freeinternals.commonlib.core.FileFormat;
import org.freeinternals.commonlib.core.FileFormatException;
import org.freeinternals.commonlib.core.PosDataInputStream;
import org.freeinternals.commonlib.ui.Icons;
import org.freeinternals.commonlib.ui.JTreeNodeFileComponent;
import org.freeinternals.format.classfile.attribute.attribute_info;
import org.freeinternals.format.classfile.constant.cp_info;

/**
 * {@code Method} of a class or interface. The {@code Method} structure has the
 * following format:
 *
 * <pre>
 *    method_info {
 *        u2 access_flags;
 *        u2 name_index;
 *        u2 descriptor_index;
 *        u2 attributes_count;
 *        attribute_info attributes[attributes_count];
 *    }
 * </pre>
 *
 * @author Amos Shi
 * @see
 * <a href="https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-4.html#jvms-4.6">
 * VM Spec: Methods
 * </a>
 *
 * <pre>
 * java:S101 - Class names should comply with a naming convention --- We respect the name from JVM Spec instead
 * java:S116 - Field names should comply with a naming convention --- We respect the name from JVM Spec instead
 * </pre>
 */
@SuppressWarnings({"java:S101", "java:S116"})
public class method_info extends FileComponent implements GenerateTreeNodeClassFile {

    public final u2 access_flags;
    public final u2 name_index;
    public final u2 descriptor_index;
    public final u2 attributes_count;
    public final attribute_info[] attributes;
    private String declaration;
    private String descriptor;
    private String name;

    method_info(final PosDataInputStream posDataInputStream, final cp_info[] cp) throws IOException, FileFormatException {
        this.startPos = posDataInputStream.getPos();
        this.length = -1;

        this.access_flags = new u2(posDataInputStream);
        this.name_index = new u2(posDataInputStream);
        this.descriptor_index = new u2(posDataInputStream);

        this.attributes_count = new u2(posDataInputStream);
        final int attrCount = this.attributes_count.value;
        if (attrCount > 0) {
            this.attributes = new attribute_info[attrCount];
            for (int i = 0; i < attrCount; i++) {
                this.attributes[i] = attribute_info.parse(posDataInputStream, cp);
            }
        } else {
            this.attributes = null;
        }

        this.calculateLength();
        this.parse(cp);
    }

    private void calculateLength() {
        this.length = 8;

        for (int i = 0; i < this.attributes_count.value; i++) {
            this.length += this.attributes[i].getLength();
        }
    }

    /**
     * Get the value of {@code attributes}[{@code index}].
     *
     * @param index Index of the method attribute(s)
     * @return The value of {@code attributes}[{@code index}]
     */
    public attribute_info getAttribute(final int index) {
        attribute_info info = null;
        if (this.attributes != null) {
            info = this.attributes[index];
        }
        return info;
    }

    /**
     * Get the declaration of the field. The declaration is generated by
     * {@code access_flags}, {@code name_index} and {@code descriptor_index}.
     *
     * @return {@code Method} declaration
     */
    public String getDeclaration() {
        return this.declaration;
    }

    /**
     * Get method descriptor.
     *
     * @return Method descriptor
     * @see #name_index
     */
    public String getDescriptor() {
        return this.descriptor;
    }

    /**
     * Generate the modifier of a {@code Method} from the {@code access_flags}
     * value.
     *
     * @return A string for modifier
     */
    public String getModifiers() {
        return AccessFlag.getMethodModifier(this.access_flags.value);
    }

    /**
     * Get method name.
     *
     * @return Method name
     * @see #name_index
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the declaration string.
     */
    private void parse(final cp_info[] cpInfo) throws FileFormatException {
        this.descriptor = ClassFile.getConstantUtf8Value(this.descriptor_index.value, cpInfo);
        this.name = ClassFile.getConstantUtf8Value(this.name_index.value, cpInfo);

        //
        String returnType;
        String parameters;

        try {
            returnType = SignatureConvertor.methodReturnTypeExtractor(this.descriptor).toString();
        } catch (FileFormatException se) {
            returnType = String.format("[Unexpected method return type: %s]", this.descriptor);
        }
        try {
            parameters = SignatureConvertor.methodParameters2Readable(this.descriptor);
        } catch (FileFormatException se) {
            parameters = String.format("[Unexpected method parameters: %s]", this.descriptor);
        }

        this.declaration = String.format("%s %s %s %s",
                this.getModifiers(), returnType, this.name, parameters);
    }

    @Override
    public void generateTreeNode(DefaultMutableTreeNode parentNode, FileFormat fileFormat) {
        final ClassFile classFile = (ClassFile)fileFormat;
        final int floatPos = this.getStartPos();
        int cpIndex;

        this.addNode(parentNode,
                floatPos,
                u2.LENGTH,
                FIELD_ACCESS_FLAGS,
                BytesTool.getBinaryString(this.access_flags.value) + " " + this.getModifiers(),
                "msg_method_info__access_flags",
                Icons.AccessFlag
        );

        cpIndex = this.name_index.value;
        this.addNode(parentNode,
                floatPos + 2,
                u2.LENGTH,
                "name_index",
                String.format(TEXT_CPINDEX_VALUE, cpIndex, "method name", classFile.getCPDescription(cpIndex)),
                "msg_method_info__name_index",
                Icons.Name
        );


        cpIndex = this.descriptor_index.value;
        this.addNode(parentNode,
                floatPos + 4,
                u2.LENGTH,
                "descriptor_index",
                String.format(TEXT_CPINDEX_VALUE, cpIndex, "method descriptor", classFile.getCPDescription(cpIndex)),
                "msg_method_info__descriptor_index",
                Icons.Descriptor
        );

        final int attributesCount = this.attributes_count.value;
        this.addNode(parentNode,
                floatPos + 6,
                u2.LENGTH,
                FIELD_ATTR_COUNT,
                attributesCount,
                "msg_method_info__attributes_count",
                Icons.Counter
        );

        if (attributesCount > 0) {
            final attribute_info lastAttr = this.getAttribute(attributesCount - 1);
            final DefaultMutableTreeNode treeNodeAttr = new DefaultMutableTreeNode(new JTreeNodeFileComponent(
                    floatPos + 8,
                    lastAttr.getStartPos() + lastAttr.getLength() - floatPos - 8,
                    String.format(FIELD_ATTRS, attributesCount),
                    MESSAGES.getString("msg_method_info__attributes")
            ));

            DefaultMutableTreeNode treeNodeAttrItem;
            attribute_info attr;
            for (int i = 0; i < attributesCount; i++) {
                attr = this.getAttribute(i);
                treeNodeAttrItem = this.addNode(treeNodeAttr,
                        attr.getStartPos(),
                        attr.getLength(),
                        String.valueOf(i + 1),
                        attr.getName(),
                        attr.getMessageKey(),
                        Icons.Annotations
                );
                attr.generateTreeNodeCommon(treeNodeAttrItem, classFile);
            }
            parentNode.add(treeNodeAttr);
        }
    }
}
