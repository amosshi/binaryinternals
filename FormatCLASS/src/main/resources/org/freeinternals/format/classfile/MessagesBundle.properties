# Copyright 2021 Free Internals.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

msg_magic = The magic item supplies the magic number identifying the <code>class</code> file format; it has the value <code>0xCAFEBABE</code>.
msg_version = The values of the <code>minor_version</code> and <code>major_version</code> items are the minor and major version numbers of this <code>class</code> file. Together, a major and a minor version number determine the version of the <code>class</code> file format. If a <code>class</code> file has major version number <code>M</code> and minor version number <code>m</code>, we denote the version of its class file format as <code>M.m</code>.
msg_constant_pool_count = The value of the <code>constant_pool_count</code> item is equal to the number of entries in the <code>constant_pool</code> table plus one. A <code>constant_pool</code> index is considered valid if it is greater than zero and less than <code>constant_pool_count</code>, with the exception for constants of type <code>long</code> and <code>double</code>.
msg_constant_pool_table = The <code>constant_pool</code> is a table of structures representing various string constants, class and interface names, field names, and other constants that are referred to within the <code>ClassFile</code> structure and its substructures. The format of each <code>constant_pool</code> table entry is indicated by its first "<code>tag</code>" byte.<br/><br/>The <code>constant_pool</code> table is indexed from <code>1</code> to <code>constant_pool_count - 1</code>.
msg_cp_tag = A 1-byte <code>tag</code> indicating the kind of constant denoted by the entry.
msg_cp_empty = All 8-byte constants take up two entries in the <code>constant_pool</code> table of the class file. If a <code>CONSTANT_Long_info</code> or <code>CONSTANT_Double_info</code> structure is the entry at index <code>n</code> in the <code>constant_pool</code> table, then the next usable entry in the table is located at index <code>n+2</code>. The <code>constant_pool</code> index <code>n+1</code> must be valid but is considered unusable.<br/><br/>In retrospect, making 8-byte constants take two constant pool entries was a poor choice.
msg_access_flags = The value of the <code>access_flags</code> item is a mask of flags used to denote access permissions to and properties of this class or interface.
msg_this_class = The value of the <code>this_class</code> item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing the <code>class</code> or <code>interface</code> defined by this <code>class</code> file.
msg_super_class = For a class, the value of the <code>super_class</code> item either must be <code>zero</code> or must be a valid index into the <code>constant_pool</code> table. If the value of the <code>super_class</code> item is <code>nonzero</code>, the <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing the direct superclass of the class defined by this <code>class</code> file. Neither the direct superclass nor any of its superclasses may have the <code>ACC_FINAL</code> flag set in the <code>access_flags</code> item of its <code>ClassFile</code> structure.<br/><br/> If the value of the <code>super_class</code> item is <code>zero</code>, then this <code>class</code> file must represent the class <code>Object</code>, the only class or interface without a direct superclass.<br/><br/>For an interface, the value of the <code>super_class</code> item must always be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing the class <code>Object</code>.

msg_interfaces_count = The value of the <code>interfaces_count</code> item gives the number of direct <code>super interfaces</code> of this class or interface type.
msg_interfaces_table = Each value in the <code>interfaces</code> array must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at each value of <code>interfaces[i]</code>, where <code>0 \u2264 i < interfaces_count</code>, must be a <code>CONSTANT_Class_info</code> structure representing an interface that is a direct super interface of this class or interface type, in the left-to-right order given in the source for the type.
msg_interfaces_item = Interface name
msg_fields_count = The value of the <code>fields_count</code> item gives the number of <code>field_info</code> structures in the <code>fields</code> table. The <code>field_info</code> structures represent all fields, both class variables and instance variables, declared by this class or interface type.
msg_fields_table = Each value in the <code>fields</code> table must be a <code>field_info</code> structure giving a complete description of a field in this class or interface. The <code>fields</code> table includes only those fields that are declared by this class or interface. It does not include items representing fields that are inherited from superclasses or super interfaces.
msg_methods_count = The value of the <code>methods_count</code> item gives the number of <code>method_info</code> structures in the <code>methods</code> table.
msg_methods_table =  Each value in the <code>methods</code> table must be a <code>method_info</code> structure giving a complete description of a method in this class or interface. If neither of the <code>ACC_NATIVE</code> and <code>ACC_ABSTRACT</code> flags are set in the <code>access_flags</code> item of a <code>method_info</code> structure, the Java Virtual Machine instructions implementing the method are also supplied.<br/><br/>The <code>method_info</code> structures represent all methods declared by this class or interface type, including instance methods, class methods, instance initialization methods, and any class or interface initialization method. The methods table does not include items representing methods that are inherited from super classes or super interfaces.
msg_attributes_count = The value of the <code>attributes_count</code> item gives the number of attributes in the <code>attributes</code> table of this class.
msg_attributes_table =  Each value of the <code>attributes</code> table must be an <code>attribute_info</code> structure.

# Constants

msg_const_class =  The <code>CONSTANT_Class_info</code> structure is used to represent a class or an interface.
msg_const_class_name_index = The value of the name_index item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a valid binary class or interface name encoded in internal form.

msg_const_ref = Fields, methods, and interface methods are represented by similar structures as current.
msg_const_ref_class_index =  The value of the class_index item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing a class or interface type that has the field or method as a member.
msg_const_ref_name_and_type_index =  The value of the name_and_type_index item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_NameAndType_info</code> structure. This <code>constant_pool</code> entry indicates the name and descriptor of the field or method.

msg_const_string = The CONSTANT_String_info structure is used to represent constant objects of the type String.
msg_const_string_string_index = The value of the string_index item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing the sequence of Unicode code points to which the String object is to be initialized.

msg_const_intfloat = The CONSTANT_Integer_info and CONSTANT_Float_info structures represent 4-byte numeric (int and float) constants.
msg_const_int_bytes = The bytes item of the <code>CONSTANT_Integer_info</code> structure represents the value of the int constant. The bytes of the value are stored in big-endian (high byte first) order.
msg_const_float_bytes = The bytes item of the <code>CONSTANT_Float_info</code> structure represents the value of the float constant in IEEE 754 binary32 floating-point format. The bytes of the item are stored in big-endian (high byte first) order.

msg_const_longdouble = The CONSTANT_Long_info and CONSTANT_Double_info represent 8-byte numeric (long and double) constants.
msg_const_long_bytes = The unsigned high_bytes and low_bytes items of the <code>CONSTANT_Long_info</code> structure together represent the value of the long constant, where the bytes of each of <code>high_bytes</code> and <code>low_bytes</code> are stored in big-endian (high byte first) order.
msg_const_double_bytes = The high_bytes and low_bytes items of the <code>CONSTANT_Double_info</code> structure together represent the double value in IEEE 754 binary64 floating-point format. The bytes of each item are stored in big-endian (high byte first) order.

msg_const_nameandtype = The CONSTANT_NameAndType_info structure is used to represent a field or method, without indicating which class or interface type it belongs to.
msg_const_nameandtype_name_index = The value of the name_index item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing either a valid unqualified name denoting a field or method, or the special method name <init>.
msg_const_nameandtype_descriptor_index = The value of the descriptor_index item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a valid field descriptor or method descriptor.

msg_const_utf8 = The <code>CONSTANT_Utf8_info_pool</code> structure is used to represent constant string values.
msg_const_utf8_length = The value of the length item gives the number of bytes in the bytes array (not the length of the resulting string).
msg_const_utf8_bytes = The bytes array contains the bytes of the string.<br/><br/>String content is encoded in modified UTF-8. Modified UTF-8 strings are encoded so that code point sequences that contain only non-null ASCII characters can be represented using only 1 byte per code point, but all code points in the Unicode codespace can be represented. Modified UTF-8 strings are not null-terminated.

msg_const_methodhandle = The CONSTANT_MethodHandle_info structure is used to represent a method handle.
msg_const_methodhandle_reference_kind = The value of the reference_kind item must be in the range 1 to 9. The value denotes the kind of this method handle, which characterizes its bytecode behavior.
msg_const_methodhandle_reference_index = The value of the reference_index item must be a valid index into the <code>constant_pool</code> table.

msg_const_methodtype = The CONSTANT_MethodType_info structure is used to represent a method type.
msg_const_methodtype_descriptor_index = The value of the descriptor_index item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a method descriptor.

msg_const_dynamic = Most structures in the <code>constant_pool</code> table represent entities directly, by combining names, descriptors, and values recorded statically in the table. In contrast, the CONSTANT_Dynamic_info and CONSTANT_InvokeDynamic_info structures represent entities indirectly, by pointing to code which computes an entity dynamically. The code, called a bootstrap method, is invoked by the Java Virtual Machine during resolution of symbolic references derived from these structures. Each structure specifies a bootstrap method as well as an auxiliary name and type that characterize the entity to be computed.
msg_const_dynamic_bootstrap_method_attr_index = The value of the bootstrap_method_attr_index item must be a valid index into the bootstrap_methods array of the bootstrap method table of this class file.
msg_const_dynamic_name_and_type_index =  The value of the name_and_type_index item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_NameAndType_info</code> structure. This <code>constant_pool</code> entry indicates a name and descriptor.

msg_const_module = The CONSTANT_Module_info structure is used to represent a module.
msg_const_module_name_index = The value of the name_index item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a valid module name.

msg_const_package = The <code>CONSTANT_Package_info</code> structure is used to represent a package exported or opened by a module.
msg_const_package_name_index = The value of the name_index item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a valid package name encoded in internal form.

# Fields

msg_field_info =  Each field is described by a field_info structure.<br/><br/> No two fields in one class file may have the same name and descriptor.
msg_field_info__access_flags = The value of the access_flags item is a mask of flags used to denote access permission to and properties of this field.
msg_field_info__name_index = The value of the name_index item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure which represents a valid unqualified name denoting a field.
msg_field_info__descriptor_index = The value of the descriptor_index item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure which represents a valid field descriptor.
msg_field_info__attributes_count = The value of the attributes_count item indicates the number of additional attributes of this field.
msg_field_info__attributes = Each value of the attributes table must be an attribute_info structure.<br/><br/> A field can have any number of optional attributes associated with it.

# Methods

msg_method_info = Each method, including each instance initialization method and the class or interface initialization method , is described by a <code>method_info</code> structure.<br/><br/> No two methods in one class file may have the same name and descriptor.
msg_method_info__access_flags = The value of the access_flags item is a mask of flags used to denote access permission to and properties of this method.
msg_method_info__name_index = The value of the name_index item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing either a valid unqualified name denoting a method, or (if this method is in a class rather than an interface) the special method name &ltinit&gt, or the special method name &ltclinit&gt.
msg_method_info__descriptor_index = The value of the descriptor_index item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a valid method descriptor.
msg_method_info__attributes_count = The value of the attributes_count item indicates the number of additional attributes of this method.
msg_method_info__attributes = Each value of the attributes table must be an <code>attribute_info</code> structure. A method can have any number of optional attributes associated with it.

# Attributes

msg_attribute_info__attribute_name_index = For all attributes, the attribute_name_index item must be a valid unsigned 16-bit index into the constant pool of the class. The <code>constant_pool</code> entry at attribute_name_index must be a <code>CONSTANT_Utf8_info</code> structure representing the name of the attribute.
msg_attribute_info__attribute_length = The value of the attribute_length item indicates the length of the subsequent information in bytes. The length does not include the initial six bytes that contain the <code>attribute_name_index</code> and <code>attribute_length</code> items.

msg_attr_ConstantValue = The <code>ConstantValue</code> attribute is a fixed-length attribute in the attributes table of a <code>field_info</code> structure. A <code>ConstantValue</code> attribute represents the value of a constant expression.
msg_attr_ConstantValue__constantvalue_index = The value of the <code>constantvalue_index</code> item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index gives the value represented by this attribute. The <code>constant_pool</code> entry must be of a type appropriate to the field.

msg_attr_Code = The <code>Code</code> attribute is a variable-length attribute in the attributes table of a <code>method_info</code> structure. A <code>Code</code> attribute contains the Java Virtual Machine instructions and auxiliary information for a method, including an instance initialization method and a class or interface initialization method.
msg_attr_Code__max_stack = The value of the <code>max_stack</code> item gives the maximum depth of the operand stack of this method at any point during execution of the method.
msg_attr_Code__max_locals = The value of the <code>max_locals</code> item gives the number of local variables in the local variable array allocated upon invocation of this method, including the local variables used to pass parameters to the method on its invocation.<br/><br/>The greatest local variable index for a value of type long or double is <code>max_locals - 2</code>. The greatest local variable index for a value of any other type is <code>max_locals - 1</code>.
msg_attr_Code__code_length = The value of the <code>code_length</code> item gives the number of bytes in the code array for this method.<br/><br/>The value of code_length must be greater than zero (as the code array must not be empty) and less than 65536.
msg_attr_Code__code = The code array gives the actual bytes of Java Virtual Machine code that implement the method.<br/><br/>When the code array is read into memory on a byte-addressable machine, if the first byte of the array is aligned on a 4-byte boundary, the tableswitch and lookupswitch 32-bit offsets will be 4-byte aligned. (Refer to the descriptions of those instructions for more information on the consequences of code array alignment.)<br/><br/>The detailed constraints on the contents of the code array are extensive and are given in a separate section.
msg_attr_exception_table_length = The value of the <code>exception_table_length</code> item gives the number of entries in the <code>exception_table</code> array.
msg_attr_exception_table = Each entry in the <code>exception_table</code> array describes one exception handler in the code array. The order of the handlers in the <code>exception_table</code> array is significant.
msg_attr_exception_table__start_end_pc = The values of the two items <code>start_pc</code> and <code>end_pc</code> indicate the ranges in the code array at which the exception handler is active.<br/><br/>The value of <code>start_pc</code> must be a valid index into the code array of the opcode of an instruction. <br/><br/>The value of <code>end_pc</code> either must be a valid index into the code array of the opcode of an instruction or must be equal to code_length, the length of the code array.<br/><br/>The value of <code>start_pc</code> must be less than the value of <code>end_pc</code>.<br/><br/>The <code>start_pc</code> is inclusive and <code>end_pc</code> is exclusive; that is, the exception handler must be active while the program counter is within the interval <code>[start_pc, end_pc)</code>.
msg_attr_exception_table__handler_pc = The value of the <code>handler_pc</code> item indicates the start of the exception handler. The value of the item must be a valid index into the code array and must be the index of the opcode of an instruction.
msg_attr_exception_table__catch_type = If the value of the <code>catch_type</code> item is <code>nonzero</code>, it must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing a class of exceptions that this exception handler is designated to catch.<br/><br/>The exception handler will be called only if the thrown exception is an instance of the given class or one of its subclasses.<br/><br/>If the value of the catch_type item is <code>zero</code>, this exception handler is called for all exceptions.
msg_attr_Code_attributes_count = The value of the <code>attributes_count</code> item indicates the number of attributes of the Code attribute.
msg_attr_Code_attributes = Each value of the attributes table must be an <code>attribute_info</code> structure. <br/><br/>A Code attribute can have any number of optional attributes associated with it.

msg_attr_StackMapTable = The <code>StackMapTable</code> attribute is a variable-length attribute in the attributes table of a <code>Code</code> attribute.<br/><br/>A <code>StackMapTable</code> attribute is used during the process of verification by type checking.<br/><br/>There may be at most one <code>StackMapTable</code> attribute in the attributes table of a <code>Code</code> attribute.
msg_attr_StackMapTable__number_of_entries = The value of the <code>number_of_entries</code> item gives the number of <code>stack_map_frame</code> entries in the <code>entries</code> table.
msg_attr_StackMapTable__entries = Each entry in the entries table describes one stack map frame of the method. The order of the stack map frames in the entries table is significant.
msg_attr_stack_map_frame__frame_type = Indicates the frame type of the stack map frame
msg_attr_stack_map_frame__all__offset_delta = The offset_delta value for the frame is given explicitly.

msg_attr_stack__same_frame = The frame type <code>same_frame</code> is represented by tags in the range <code>[0-63]</code>. This frame type indicates that the frame has exactly the same local variables as the previous frame and that the operand stack is empty. The <code>offset_delta</code> value for the frame is the value of the tag item, <code>frame_type</code>.
msg_attr_stack__same_locals_1_stack_item_frame = The frame type <code>same_locals_1_stack_item_frame</code> is represented by tags in the range <code>[64, 127]</code>. This frame type indicates that the frame has exactly the same local variables as the previous frame and that the operand stack has one entry.<br/><br/>The <code>offset_delta</code> value for the frame is given by the formula <code>frame_type - 64</code>.<br/><br/>The verification type of the one stack entry appears after the frame type.
msg_attr_stack__reserved = Tags in the range <code>[128-246]</code> are reserved for future use.
msg_attr_stack__same_locals_1_stack_item_frame_extended = The frame type <code>same_locals_1_stack_item_frame_extended</code> is represented by the tag <code>247</code>. This frame type indicates that the frame has exactly the same local variables as the previous frame and that the operand stack has one entry.<br/><br/>The <code>offset_delta</code> value for the frame is given explicitly, unlike in the frame type <code>same_locals_1_stack_item_frame</code>.<br/><br/>The verification type of the one stack entry appears after offset_delta.
msg_attr_stack__chop_frame = The frame type <code>chop_frame</code> is represented by tags in the range <code>[248-250]</code>. This frame type indicates that the frame has the same local variables as the previous frame except that the last k local variables are absent, and that the operand stack is empty.
msg_attr_stack__same_frame_extended = The frame type <code>same_frame_extended</code> is represented by the tag <code>251</code>. This frame type indicates that the frame has exactly the same local variables as the previous frame and that the operand stack is empty.
msg_attr_stack__append_frame = The frame type <code>append_frame</code> is represented by tags in the range <code>[252-254]</code>. This frame type indicates that the frame has the same locals as the previous frame except that k additional locals are defined, and that the operand stack is empty.
msg_attr_stack__append_frame__locals = The <code>0th</code> entry in locals represents the verification type of the first additional local variable. If <code>locals[M]</code> represents local variable <code>N</code>, then:<br/><br/>- <code>locals[M+1]</code> represents local variable <code>N+1</code> if <code>locals[M]</code> is one of <code>Top_variable_info</code>, <code>Integer_variable_info</code>, <code>Float_variable_info</code>, <code>Null_variable_info</code>, <code>UninitializedThis_variable_info</code>, <code>Object_variable_info</code>, or <code>Uninitialized_variable_info</code>; and<br/>- <code>locals[M+1]</code> represents local variable <code>N+2</code> if <code>locals[M]</code> is either <code>Long_variable_info</code> or <code>Double_variable_info</code>.<br/><br/>It is an error if, for any index <code>i</code>, <code>locals[i]</code> represents a local variable whose index is greater than the maximum number of local variables for the method.
msg_attr_stack__full_frame = The frame type <code>full_frame</code> is represented by the tag <code>255</code>.
msg_attr_stack__full_frame__number_of_locals = Number of records in the <code>locals</code> array
msg_attr_stack__full_frame__locals = The <code>0th</code> entry in locals represents the verification type of local variable <code>0</code>. If <code>locals[M]</code> represents local variable <code>N</code>, then:<br/><br/>- <code>locals[M+1]</code> represents local variable <code>N+1</code> if <code>locals[M]</code> is one of <code>Top_variable_info</code>, <code>Top_variable_info</code>Top_variable_info, <code>Top_variable_info</code>Top_variable_info, <code>Null_variable_info</code>, <code>UninitializedThis_variable_info</code>, <code>Object_variable_info</code>, or <code>Uninitialized_variable_info</code>; and<br/>- <code>locals[M+1]</code> represents local variable <code>N+2</code> if <code>locals[M]</code> is either <code>Long_variable_info</code> or <code>Double_variable_info</code>.<br/><br/>It is an error if, for any index <code>i</code>, <code>locals[i]</code> represents a local variable whose index is greater than the maximum number of local variables for the method.
msg_attr_stack__full_frame__number_of_stack_items = Number of records in the <code>stack</code> array
msg_attr_stack__full_frame__stack = The <code>0th</code> entry in stack represents the verification type of the bottom of the operand stack, and subsequent entries in stack represent the verification types of stack entries closer to the top of the operand stack. We refer to the bottom of the operand stack as stack entry <code>0</code>, and to subsequent entries of the operand stack as stack entry <code>1</code>, <code>2</code>, etc. If <code>stack[M]</code> represents stack entry <code>N</code>, then:<br/><br/>- <code>stack[M+1]</code> represents stack entry <code>N+1</code> if <code>stack[M]</code> is one of <code>Top_variable_info</code>, <code>Integer_variable_info</code>, <code>Float_variable_info</code>, <code>Null_variable_info</code>, <code>UninitializedThis_variable_info</code>, <code>Object_variable_info</code>, or <code>Uninitialized_variable_info</code>; and<br/>- <code>stack[M+1]</code> represents stack entry <code>N+2</code> if <code>stack[M]</code> is either <code>Long_variable_info</code> or <code>Double_variable_info</code>.<br/><br/>It is an error if, for any index <code>i</code>, <code>stack[i]</code> represents a stack entry whose index is greater than the maximum operand stack size for the method.

msg_attr_verification_type_info = A verification type specifies the type of either one or two locations, where a location is either a single local variable or a single operand stack entry.<br /><br />A verification type is represented by a discriminated union, <code>verification_type_info</code>, that consists of a one-byte <code>tag</code>, indicating which item of the union is in use, followed by zero or more bytes, giving more information about the <code>tag</code>.
msg_attr_verification_type_info__tag = The tag indicates the frame type of the stack map frame
msg_attr_verification_type_info__cpool_index = The <code>Object_variable_info</code> item indicates that the location has the verification type which is the class represented by the <code>CONSTANT_Class_info</code> structure found in the <code>constant_pool</code> table at the index given by <code>cpool_index</code>.
msg_attr_verification_type_info__offset = The Offset item indicates the offset, in the code array of the Code attribute that contains this <code>StackMapTable</code> attribute, of the <code>new</code> instruction that created the object being stored in the location.

msg_attr_Exceptions = The <code>Exceptions</code> attribute is a variable-length attribute in the attributes table of a <code>method_info</code> structure. The <code>Exceptions</code> attribute indicates which checked exceptions a method may throw.<br/><br/>There may be at most one Exceptions attribute in the attributes table of a <code>method_info</code> structure.
msg_attr_Exceptions__number_of_exceptions = The value of the <code>number_of_exceptions</code> item indicates the number of entries in the <code>exception_index_table</code>.
msg_attr_Exceptions__exception_index_table = Each value in the <code>exception_index_table</code> array must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> table entry at that index must be a <code>CONSTANT_Class_info</code> structure representing a class type that this method is declared to throw.

msg_attr_InnerClasses =  The <code>InnerClasses</code> attribute is a variable-length attribute in the attributes table of a <code>ClassFile</code> structure.<br/><br/>If the constant pool of a class or interface <code>C</code> contains at least one <code>CONSTANT_Class_info entry</code> which represents a class or interface that is not a member of a package, then there must be exactly one <code>InnerClasses</code> attribute in the <code>attributes</code> table of the <code>ClassFile</code> structure for <code>C</code>.
msg_attr_InnerClasses__number_of_classes = The value of the <code>number_of_classes</code> item indicates the number of entries in the <code>classes</code> array.
msg_attr_classes = Every <code>CONSTANT_Class_info</code> entry in the <code>constant_pool</code> table which represents a class or interface <code>C</code> that is not a package member must have exactly one corresponding entry in the <code>classes</code> array.
msg_attr_classes__inner_class_info_index = The value of the <code>inner_class_info_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing <code>C</code>.
msg_attr_classes__outer_class_info_index = If <code>C</code> is not a member of a class or an interface - that is, if <code>C</code> is a top-level class or interface or a local class or an anonymous class - then the value of the <code>outer_class_info_index</code> item must be zero.<br/><br/>Otherwise, the value of the <code>outer_class_info_index</code> item must be a valid index into the <code>constant_pool</code> table, and the entry at that index must be a <code>CONSTANT_Class_info</code> structure representing the class or interface of which <code>C</code> is a member.<br /><br />The value of the <code>outer_class_info_index</code> item must not equal the the value of the <code>inner_class_info_index</code> item.
msg_attr_classes__inner_name_index =  If <code>C</code> is anonymous, the value of <code>inner_name_index</code> the item must be zero.<br/><br/>Otherwise, the value of the <code>inner_name_index</code> item must be a valid index into the <code>constant_pool</code> table, and the entry at that index must be a <code>CONSTANT_Utf8_info</code> structure that represents the original simple name of <code>C</code>, as given in the source code from which this class file was compiled.
msg_attr_classes__inner_class_access_flags = The value of the <code>inner_class_access_flags</code> item is a mask of flags used to denote access permissions to and properties of class or interface <code>C</code> as declared in the source code from which this class file was compiled.<br/><br/>It is used by a compiler to recover the original information when source code is not available.

msg_attr_EnclosingMethod = The <code>EnclosingMethod</code> attribute is a fixed-length attribute in the attributes table of a <code>ClassFile</code> structure.<br/><br/>A class must have an <code>EnclosingMethod</code> attribute if and only if it represents a local class or an anonymous class.<br/><br/>There may be at most one <code>EnclosingMethod</code> attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure.
msg_attr_EnclosingMethod__class_index = The value of the <code>class_index</code> item must be a valid index into the <code>constant_pool</code> table. <br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing the innermost class that encloses the declaration of the current class.
msg_attr_EnclosingMethod__method_index = If the current class is not immediately enclosed by a method or constructor, then the value of the <code>method_index</code> item must be zero. <br/><br/> Otherwise, the value of the <code>method_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_NameAndType_info</code> structure representing the name and type of a method in the class referenced by the <code>class_index</code> attribute above.

msg_attr_Synthetic = The <code>Synthetic</code> attribute is a fixed-length attribute in the attributes table of a <code>ClassFile</code>, <code>field_info</code>, or <code>method_info</code> structure.<br/><br/>A class member that does not appear in the source code must be marked using a <code>Synthetic</code> attribute, or else it must have its <code>ACC_SYNTHETIC</code> flag set.<br/><br/>The only exceptions to this requirement are compiler-generated members which are not considered implementation artifacts, namely:<br/><br/>* an instance initialization method representing a default constructor of the Java programming language<br/>* a class or interface initialization method<br/>* the implicitly declared members of enum and record classes<br/>

msg_attr_Signature = The <code>Signature</code> attribute is a fixed-length attribute in the attributes table of a <code>ClassFile</code>, <code>field_info</code>, <code>method_info</code>, or <code>record_component_info</code> structure.<br/><br/>A <code>Signature</code> attribute stores a signature for a class, interface, constructor, method, field, or record component whose declaration in the Java programming language uses type variables or parameterized types.<br/><br/> There may be at most one <code>Signature</code> attribute in the attributes table of a <code>ClassFile</code>, <code>field_info</code>, <code>method_info</code>, or <code>record_component_info</code> structure.
msg_attr_Signature__signature_index = The value of the <code>signature_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/> The <code>constant_pool</code> entry at that index must be a The <code>CONSTANT_Utf8_info</code> structure representing a class signature if this Signature attribute is an attribute of a <code>ClassFile</code> structure; a method signature if this Signature attribute is an attribute of a <code>method_info</code> structure; or a field signature otherwise.

msg_attr_SourceFile = The <code>SourceFile</code> attribute is an optional fixed-length attribute in the attributes table of a <code>ClassFile</code> structure. <br/><br/>There may be at most one <code>SourceFile</code> attribute in the attributes table of a <code>ClassFile</code> structure.
msg_attr_SourceFile__sourcefile_index = The value of the <code>sourcefile_index</code> item must be a valid index into the <code>constant_pool</code> table. <br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a string.

msg_attr_SourceDebugExtension = The <code>SourceDebugExtension</code> attribute is an optional attribute in the attributes table of a <code>ClassFile</code> structure.<br/><br/>There may be at most one <code>SourceDebugExtension</code> attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure.
msg_attr_SourceDebugExtension__debug_extension = The <code>debug_extension</code> array holds extended debugging information which has no semantic effect on the Java Virtual Machine.<br/><br/>The information is represented using a modified UTF-8 string with no terminating zero byte.

msg_attr_LineNumberTable = The <code>LineNumberTable</code> attribute is an optional variable-length attribute in the attributes table of a <code>Code</code> attribute. It may be used by debuggers to determine which part of the code array corresponds to a given line number in the original source file. <br/><br/>If multiple <code>LineNumberTable</code> attributes are present in the attributes table of a <code>Code</code> attribute, then they may appear in any order. <br/><br/> There may be more than one <code>LineNumberTable</code> attribute per line of a source file in the attributes table of a <code>Code</code> attribute. That is, <code>LineNumberTable</code> attributes may together represent a given line of a source file, and need not be one-to-one with source lines.
msg_attr_line_number_table_length = The value of the <code>line_number_table_length</code> item indicates the number of entries in the <code>line_number_table</code> array.
msg_attr_line_number_table = Each entry in the <code>line_number_table</code> array indicates that the line number in the original source file changes at a given point in the code array.
msg_attr_line_number_table__start_pc = The value of the <code>start_pc</code> item must be a valid index into the code array of this <code>Code</code> attribute. <br/><br/>The item indicates the index into the code array at which the code for a new line in the original source file begins.
msg_attr_line_number_table__line_number = The value of the <code>line_number</code> item gives the corresponding line number in the original source file.

msg_attr_LocalVariableTable = The <code>LocalVariableTable</code> attribute is an optional variable-length attribute in the attributes table of a <code>Code</code> attribute. <br/><br/>It may be used by debuggers to determine the value of a given local variable during the execution of a method.<br/><br/>If multiple <code>LocalVariableTable</code> attributes are present in the attributes table of a <code>Code</code> attribute, then they may appear in any order.<br/><br/>There may be no more than one <code>LocalVariableTable</code> attribute per local variable in the attributes table of a <code>Code</code> attribute.
msg_attr_local_variable_table_length = The value of the <code>local_variable_table_length</code> item indicates the number of entries in the <code>local_variable_table</code> array.
msg_attr_local_variable_table = Each entry in the <code>local_variable_table</code> array indicates a range of code array offsets within which a local variable has a value, and indicates the index into the local variable array of the current frame at which that local variable can be found.
msg_attr_local_variable_table__start_pc_length = The value of the <code>start_pc</code> item must be a valid index into the code array of this <code>Code</code> attribute and must be the index of the opcode of an instruction.<br/><br/>The value of <code>start_pc</code> + <code>length</code> must either be a valid index into the code array of this <code>Code</code> attribute and be the index of the opcode of an instruction, or it must be the first index beyond the end of that code array.<br/><br/>The <code>start_pc</code> and <code>length</code> items indicate that the given local variable has a value at indices into the code array in the interval <code>[start_pc, start_pc + length)</code>, that is, between <code>start_pc</code> inclusive and <code>start_pc + length</code> exclusive.
msg_attr_local_variable_table__name_index = The value of the <code>name_index</code> item must be a valid index into the <code>constant_pool</code> table. <br/><br/>The <code>constant_pool</code> entry at that index must contain a <code>CONSTANT_Utf8_info</code> structure representing a valid unqualified name denoting a local variable.
msg_attr_local_variable_table__descriptor_index = The value of the <code>descriptor_index</code> item must be a valid index into the <code>constant_pool</code> table. <br/><br/>The <code>constant_pool</code> entry at that index must contain a <code>CONSTANT_Utf8_info</code> structure representing a field descriptor which encodes the type of a local variable in the source program.
msg_attr_local_variable_table__index = The value of the <code>index</code> item must be a valid index into the local variable array of the current frame. <br/><br/>The given local variable is at <code>index</code> in the local variable array of the current frame.<br/><br/> If the given local variable is of type <code>double</code> or <code>long</code>, it occupies both <code>index</code> and <code>index + 1</code>.

msg_attr_LocalVariableTypeTable = The <code>LocalVariableTypeTable</code> attribute is an optional variable-length attribute in the attributes table of a <code>Code</code> attribute. It may be used by debuggers to determine the value of a given local variable during the execution of a method.<br/><br/>If multiple <code>LocalVariableTypeTable</code> attributes are present in the attributes table of a given <code>Code</code> attribute, then they may appear in any order.<br/><br/>There may be no more than one <code>LocalVariableTypeTable</code> attribute per local variable in the attributes table of a <code>Code</code> attribute.
msg_attr_local_variable_type_table_length = The value of the <code>local_variable_type_table_length</code> item indicates the number of entries in the <code>local_variable_type_table</code> array.
msg_attr_local_variable_type_table__start_pc_length = The value of the <code>start_pc</code> item must be a valid index into the code array of this <code>Code</code> attribute and must be the index of the opcode of an instruction.<br/><br/>The value of <code>start_pc + length</code> must either be a valid index into the code array of this <code>Code</code> attribute and be the index of the opcode of an instruction, or it must be the first index beyond the end of that code array.<br/><br/>The <code>start_pc</code> and <code>length</code> items indicate that the given local variable has a value at indices into the code array in the interval <code>[start_pc, start_pc + length)</code>, that is, between <code>start_pc</code> inclusive and <code>start_pc + length</code> exclusive.
msg_attr_local_variable_type_table__name_index = The value of the <code>name_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must contain a <code>CONSTANT_Utf8_info</code> structure representing a valid unqualified name denoting a local variable.
msg_attr_local_variable_type_table__signature_index = The value of the <code>signature_index</code> item must be a valid index into the <code>constant_pool</code> table. <br/><br/>The <code>constant_pool</code> entry at that index must contain a <code>CONSTANT_Utf8_info</code> structure representing a field signature which encodes the type of a local variable in the source program.
msg_attr_local_variable_type_table__index = The value of the <code>index</code> item must be a valid index into the local variable array of the current frame.<br/><br/>The given local variable is at <code>index</code> in the local variable array of the current frame.<br/><br/>If the given local variable is of type <code>double</code> or <code>long</code>, it occupies both <code>index</code> and <code>index + 1</code>.

msg_attr_Deprecated = The <code>Deprecated</code> attribute is an optional fixed-length attribute in the attributes table of a <code>ClassFile</code>, <code>field_info</code>, or <code>method_info</code> structure. <br/><br/>A class, interface, method, or field may be marked using a <code>Deprecated</code> attribute to indicate that the class, interface, method, or field has been superseded.<br/><br/>A run-time interpreter or tool that reads the class file format, such as a compiler, can use this marking to advise the user that a superseded class, interface, method, or field is being referred to. <br/><br/>The presence of a <code>Deprecated</code> attribute does not alter the semantics of a class or interface.

msg_attr_annotation__type_index = The value of the <code>type_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a field descriptor.<br/><br/>The field descriptor denotes the type of the annotation represented by this annotation structure.
msg_attr_annotation__num_element_value_pairs = The value of the <code>num_element_value_pairs</code> item gives the number of element-value pairs of the annotation represented by this annotation structure.
msg_attr_annotation__element_value_pairs = Each value of the <code>element_value_pairs</code> table represents a single element-value pair in the annotation represented by this annotation structure.
msg_attr_annotation__element_value_pairs_element_name_index = The value of the <code>element_name_index</code> item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure. <br/><br/>The <code>constant_pool</code> entry denotes the name of the element of the element-value pair represented by this <code>element_value_pairs</code> entry.
msg_attr_annotation__element_value_pairs_value = The value of the value item represents the value of the element-value pair represented by this <code>element_value_pairs</code> entry.

msg_attr_element_value = The <code>element_value</code> structure is a discriminated union representing the value of an element-value pair.
msg_attr_element_value__tag = The tag item uses a single ASCII character to indicate the type of the value of the element-value pair. This determines which item of the value union is in use.
msg_attr_element_value__const_value_index = The <code>const_value_index</code> item denotes a constant of either a primitive type or the type <code>String</code> as the value of this element-value pair.<br/><br/>The value of the <code>const_value_index</code> item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be of a type appropriate to the <code>tag</code> item.
msg_attr_element_value__enum_const_value = The <code>enum_const_value</code> item denotes an enum constant as the value of this element-value pair.
msg_attr_element_value__enum_const_value__type_name_index =The value of the <code>type_name_index</code> item must be a valid index into the <code>constant_pool</code> table. <br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a field descriptor. <br/><br/>The <code>constant_pool</code> entry gives the internal form of the binary name of the type of the enum constant represented by this <code>element_value</code> structure.
msg_attr_element_value__enum_const_value__const_name_index =The value of the <code>const_name_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure.<br/><br/>The <code>constant_pool</code> entry gives the simple name of the enum constant represented by this <code>element_value</code> structure.
msg_attr_element_value__class_info_index = The <code>class_info_index</code> item denotes a class literal as the value of this element-value pair.<br/><br/>The <code>class_info_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a return descriptor.<br/><br/>The return descriptor gives the type corresponding to the class literal represented by this <code>element_value</code> structure.
msg_attr_element_value__annotation_value = The <code>annotation_value</code> item denotes a "nested" annotation as the value of this element-value pair.<br/><br/>The value of the <code>annotation_value</code> item is an <code>annotation</code> structure that gives the annotation represented by this <code>element_value</code> structure.

msg_attr_element_value__array_value =  The <code>array_value</code> item denotes an array as the value of this element-value pair.
msg_attr_element_value__array_value__num_values = The value of the <code>num_values</code> item gives the number of elements in the array represented by this <code>element_value</code> structure.
msg_attr_element_value__array_value__values = Each value in the values table gives the corresponding element of the array represented by this <code>element_value</code> structure.

msg_attr_RuntimeVisibleAnnotations = The <code>RuntimeVisibleAnnotations</code> attribute is a variable-length attribute in the attributes table of a <code>ClassFile</code>, <code>field_info</code>, <code>method_info</code>, or <code>record_component_info</code> structure.<br/><br/>The <code>RuntimeVisibleAnnotations</code> attribute stores run-time visible annotations on the declaration of the corresponding class, field, method, or record component.<br/><br/>There may be at most one <code>RuntimeVisibleAnnotations</code> attribute in the attributes table of a <code>ClassFile</code>, <code>field_info</code>, <code>method_info</code>, or <code>record_component_info</code> structure.
msg_attr_RuntimeVisibleAnnotations__num_annotations = The value of the <code>num_annotations</code> item gives the number of run-time visible annotations represented by the structure.
msg_attr_RuntimeVisibleAnnotations__annotations = Each entry in the <code>annotations</code> table represents a single run-time visible annotation on a declaration.

msg_attr_RuntimeInvisibleAnnotations = The <code>RuntimeInvisibleAnnotations</code> attribute is a variable-length attribute in the <code>attributes</code> table of a <code>ClassFile</code>, <code>field_info</code>, <code>method_info</code>, or <code>record_component_info</code> structure.<br/><br/>The <code>RuntimeInvisibleAnnotations</code> attribute stores run-time invisible annotations on the declaration of the corresponding class, method, field, or record component.<br/><br/>There may be at most one RuntimeInvisibleAnnotations attribute in the <code>attributes</code> table of a <code>ClassFile</code>, <code>field_info</code>, <code>method_info</code>, or <code>record_component_info</code> structure.
msg_attr_RuntimeInvisibleAnnotations__num_annotations = The value of the <code>num_annotations</code> item gives the number of run-time invisible annotations represented by the structure.
msg_attr_RuntimeInvisibleAnnotations__annotations = Each entry in the <code>annotations</code> table represents a single run-time invisible annotation on a declaration.

msg_attr_RuntimeVisibleParameterAnnotations = The <code>RuntimeVisibleParameterAnnotations</code> attribute is a variable-length attribute in the attributes table of the <code>method_info</code> structure.<br/><br/>The <code>RuntimeVisibleParameterAnnotations</code> attribute stores run-time visible annotations on the declarations of formal parameters of the corresponding method.<br/><br/>There may be at most one <code>RuntimeVisibleParameterAnnotations</code> attribute in the <code>attributes</code> table of a <code>method_info</code> structure.
msg_attr_RuntimeVisibleParameterAnnotations__num_parameters = The value of the <code>num_parameters</code> item gives the number of run-time visible parameter annotations represented by this structure.<br/><br/>There is no assurance that this number is the same as the number of parameter descriptors in the method descriptor.
msg_attr_RuntimeVisibleParameterAnnotations_parameter_annotations = Each entry in the <code>parameter_annotations</code> table represents all of the run-time visible annotations on the declaration of a single formal parameter.
msg_attr_RuntimeVisibleParameterAnnotations_parameter_annotations__num_annotations = The value of the <code>num_annotations</code> item indicates the number of run-time visible annotations on the declaration of the formal parameter corresponding to the <code>parameter_annotations</code> entry.
msg_attr_RuntimeVisibleParameterAnnotations_parameter_annotations__annotations = Each entry in the <code>annotations</code> table represents a single run-time visible annotation on the declaration of the formal parameter corresponding to the <code>parameter_annotations</code> entry.

msg_attr_RuntimeInvisibleParameterAnnotations = The <code>RuntimeInvisibleParameterAnnotations</code> attribute is a variable-length attribute in the attributes table of a <code>method_info</code> structure. <br/><br/>The <code>RuntimeInvisibleParameterAnnotations</code> attribute stores run-time invisible annotations on the declarations of formal parameters of the corresponding method.<br/><br/>There may be at most one <code>RuntimeInvisibleParameterAnnotations</code> attribute in the <code>attributes</code> table of a <code>method_info</code> structure.
msg_attr_RuntimeInvisibleParameterAnnotations__num_parameters = The value of the <code>num_parameters</code> item gives the number of run-time invisible parameter annotations represented by this structure.<br/><br/>There is no assurance that this number is the same as the number of parameter descriptors in the method descriptor.
msg_attr_RuntimeInvisibleParameterAnnotations_parameter_annotations = Each entry in the <code>parameter_annotations</code> table represents all of the run-time invisible annotations on the declaration of a single formal parameter.
msg_attr_RuntimeInvisibleParameterAnnotations_parameter_annotations__num_annotations = The value of the <code>num_annotations</code> item indicates the number of run-time invisible annotations on the declaration of the formal parameter corresponding to the <code>parameter_annotations</code> entry.
msg_attr_RuntimeInvisibleParameterAnnotations_parameter_annotations__annotations = Each entry in the <code>annotations</code> table represents a single run-time invisible annotation on the declaration of the formal parameter corresponding to the <code>parameter_annotations</code> entry.

msg_attr_RuntimeVisibleTypeAnnotations = The <code>RuntimeVisibleTypeAnnotations</code> attribute is an variable-length attribute in the attributes table of a <code>ClassFile</code>, <code>field_info</code>, <code>method_info</code>, or <code>record_component_info</code> structure, or <code>Code</code> attribute.<br/><br/>The <code>RuntimeVisibleTypeAnnotations</code> attribute stores run-time visible annotations on types used in the declaration of the corresponding class, field, method, or record component, or in an expression in the corresponding method body. <br/><br/>The <code>RuntimeVisibleTypeAnnotations</code> attribute also stores run-time visible annotations on type parameter declarations of generic classes, interfaces, methods, and constructors.<br/><br/>There may be at most one <code>RuntimeVisibleTypeAnnotations</code> attribute in the attributes table of a <code>ClassFile</code>, <code>field_info</code>, <code>method_info</code>, or <code>record_component_info</code> structure, or <code>Code</code> attribute.<br/><br/>An <code>attributes</code> table contains a <code>RuntimeVisibleTypeAnnotations</code> attribute only if types are annotated in kinds of declaration or expression that correspond to the parent structure or attribute of the <code>attributes</code> table.
msg_attr_RuntimeVisibleTypeAnnotations__num_annotations = The value of the <code>num_annotations</code> item gives the number of run-time visible type annotations represented by the structure.
msg_attr_RuntimeVisibleTypeAnnotations__annotations = Each entry in the <code>annotations</code> table represents a single run-time visible annotation on a type used in a declaration or expression.

msg_attr_RuntimeInvisibleTypeAnnotations = The <code>RuntimeInvisibleTypeAnnotations</code> attribute is an variable-length attribute in the attributes table of a <code>ClassFile</code>, <code>field_info</code>, <code>method_info</code>, or <code>record_component_info</code> structure, or <code>Code</code> attribute. <br/><br/>The <code>RuntimeInvisibleTypeAnnotations</code> attribute stores run-time invisible annotations on types used in the corresponding declaration of a class, field, method, or record component, or in an expression in the corresponding method body. <br/><br/>The <code>RuntimeInvisibleTypeAnnotations</code> attribute also stores annotations on type parameter declarations of generic classes, interfaces, methods, and constructors.<br/><br/>There may be at most one <code>RuntimeInvisibleTypeAnnotations</code> attribute in the attributes table of a <code>ClassFile</code>, <code>field_info</code>, <code>method_info</code>, or <code>record_component_info</code> structure, or <code>Code</code> attribute.<br/><br/>An attributes table contains a <code>RuntimeInvisibleTypeAnnotations</code> attribute only if types are annotated in kinds of declaration or expression that correspond to the parent structure or attribute of the <code>attributes</code> table.
msg_attr_RuntimeInvisibleTypeAnnotations__num_annotations = The value of the <code>num_annotations</code> item gives the number of run-time invisible type annotations represented by the structure.
msg_attr_RuntimeInvisibleTypeAnnotations__annotations = Each entry in the <code>annotations</code> table represents a single run-time invisible annotation on a type used in a declaration or expression.

msg_attr_type_annotation__target_type = The value of the <code>target_type</code> item denotes the kind of target on which the annotation appears. The various kinds of target correspond to the <code>type contexts</code> of the Java programming language where types are used in declarations and expressions.<br/><br/>The value of the <code>target_type</code> item determines whether the <code>type_annotation</code> structure appears in a <code>RuntimeVisibleTypeAnnotations</code> attribute in a <code>ClassFile</code> structure, a <code>field_info</code> structure, a <code>method_info</code> structure, or a <code>Code</code> attribute.

// msg_attr_type_annotation__target_info = The value of the <code>target_info</code> item denotes precisely which type in a declaration or expression is annotated.
msg_attr_type_annotation__target_info__type_parameter_target = The <code>type_parameter_target</code> item indicates that an annotation appears on the declaration of the <code>i</code>'th type parameter of a generic class, generic interface, generic method, or generic constructor.
msg_attr_type_annotation__target_info__type_parameter_target__type_parameter_index = The value of the <code>type_parameter_index</code> item specifies which type parameter declaration is annotated.<br/><br/>A <code>type_parameter_index</code> value of <code>0</code> specifies the first type parameter declaration.
msg_attr_type_annotation__target_info__supertype_target = The <code>supertype_target</code> item indicates that an annotation appears on a type in the extends or implements clause of a class or interface declaration.
msg_attr_type_annotation__target_info__supertype_target__supertype_index = A <code>supertype_index</code> value of <code>65535</code> specifies that the annotation appears on the superclass in an extends clause of a class declaration.<br/><br/>Any other <code>supertype_index</code> value is an index into the <code>interfaces</code> array of the enclosing <code>ClassFile</code> structure, and specifies that the annotation appears on that superinterface in either the <code>implements</code> clause of a class declaration or the <code>extends</code> clause of an interface declaration.

msg_attr_type_annotation__target_info__type_parameter_bound_target = The <code>type_parameter_bound_target</code> item indicates that an annotation appears on the <code>i</code>'th bound of the <code>j</code>'th type parameter declaration of a generic class, interface, method, or constructor.
msg_attr_type_annotation__target_info__type_parameter_bound_target__type_parameter_index = The value of the of <code>type_parameter_index</code> item specifies which type parameter declaration has an annotated bound. <br/><br/>A <code>type_parameter_index</code> value of <code>0</code> specifies the first type parameter declaration.
msg_attr_type_annotation__target_info__type_parameter_bound_target__bound_index = The value of the <code>bound_index</code> item specifies which bound of the type parameter declaration indicated by <code>type_parameter_index</code> is annotated. <br/><br/>A <code>bound_index</code> value of <code>0</code> specifies the first bound of a type parameter declaration.

// msg_attr_type_annotation__target_info__empty_target = The <code>empty_target</code> item indicates that an annotation appears on either the type in a field declaration, the type in a record component declaration, the return type of a method, the type of a newly constructed object, or the receiver type of a method or constructor.
msg_attr_type_annotation__target_info__formal_parameter_target = The <code>formal_parameter_target</code> item indicates that an annotation appears on the type in a formal parameter declaration of a method, constructor, or lambda expression.
msg_attr_type_annotation__target_info__formal_parameter_target__formal_parameter_index = The value of the <code>formal_parameter_index</code> item specifies which formal parameter declaration has an annotated type. A <code>formal_parameter_index</code> value of <code>i</code> may, but is not required to, correspond to the <code>i</code>'th parameter descriptor in the method descriptor.

msg_attr_type_annotation__target_info__throws_target = The <code>throws_target</code> item indicates that an annotation appears on the <code>i</code>'th type in the throws clause of a method or constructor declaration.
msg_attr_type_annotation__target_info__throws_target__throws_type_index = The value of the <code>throws_type_index</code> item is an index into the <code>exception_index_table</code> array of the <code>Exceptions</code> attribute of the <code>method_info</code> structure enclosing the <code>RuntimeVisibleTypeAnnotations</code> attribute.

msg_attr_type_annotation__target_info__localvar_target = The <code>localvar_target</code> item indicates that an annotation appears on the type in a local variable declaration, including a variable declared as a resource in a <code>try-with-resources</code> statement.
msg_attr_type_annotation__target_info__localvar_target__table_length = The value of the <code>table_length</code> item gives the number of entries in the <code>table</code> array.
msg_attr_type_annotation__target_info__localvar_target__table = Each entry indicates a range of code array offsets within which a local variable has a value. It also indicates the index into the local variable array of the current frame at which that local variable can be found.
msg_attr_type_annotation__target_info__localvar_target__table__start_pc_length = The given local variable has a value at indices into the code array in the interval <code>[start_pc, start_pc + length)</code>, that is, between <code>start_pc</code> inclusive and <code>start_pc + length</code> exclusive.
msg_attr_type_annotation__target_info__localvar_target__table__index = The given local variable must be at <code>index</code> in the local variable array of the current frame.<br/><br/>If the local variable at <code>index</code> is of type <code>double</code> or <code>long</code>, it occupies both <code>index</code> and <code>index + 1</code>.

msg_attr_type_annotation__target_info__catch_target = The <code>catch_target</code> item indicates that an annotation appears on the <code>i</code>'th type in an exception parameter declaration.
msg_attr_type_annotation__target_info__catch_target__exception_table_index = The value of the <code>exception_table_index</code> item is an index into the <code>exception_table</code> array of the <code>Code</code> attribute enclosing the <code>RuntimeVisibleTypeAnnotations</code> attribute.

msg_attr_type_annotation__target_info__offset_target = The <code>offset_target</code> item indicates that an annotation appears on either the type in an <code>instanceof</code> expression or a <code>new</code> expression, or the type before the <code>::</code> in a method reference expression.
msg_attr_type_annotation__target_info__offset_target__offset = The value of the <code>offset</code> item specifies the code array offset of either the <code>bytecode</code> instruction corresponding to the <code>instanceof</code> expression, the <code>new</code> bytecode instruction corresponding to the <code>new</code> expression, or the <code>bytecode</code> instruction corresponding to the method reference expression.

msg_attr_type_annotation__target_info__type_argument_target = The <code>type_argument_target</code> item indicates that an annotation appears either on the <code>i</code>'th type in a cast expression, or on the <code>i</code>'th type argument in the explicit type argument list for any of the following: a <code>new</code> expression, an explicit constructor invocation statement, a method invocation expression, or a method reference expression.
msg_attr_type_annotation__target_info__type_argument_target__offset = The value of the <code>offset</code> item specifies the code array offset of either<br/> the <code>bytecode</code> instruction corresponding to the cast expression,<br/> the <code>new</code> bytecode instruction corresponding to the <code>new</code> expression,<br/> the bytecode instruction corresponding to the explicit constructor invocation statement,<br/> the bytecode instruction corresponding to the method invocation expression,<br/> or the bytecode instruction corresponding to the method reference expression.
msg_attr_type_annotation__target_info__type_argument_target__type_argument_index = For a cast expression, the value of the <code>type_argument_index</code> item specifies which type in the cast operator is annotated. A <code>type_argument_index</code> value of <code>0</code> specifies the first (or only) type in the cast operator.<br/><br/>The possibility of more than one type in a cast expression arises from a cast to an intersection type.<br/><br/>For an explicit type argument list, the value of the <code>type_argument_index</code> item specifies which type argument is annotated. A <code>type_argument_index</code> value of <code>0</code> specifies the first type argument.

msg_attr_type_annotation__target_path = The value of the <code>target_path</code> item denotes precisely which part of the type indicated by <code>target_info</code> is annotated.
msg_attr_type_annotation__type_index__num_element_value_pairs__element_value_pairs = The meaning of these items in the <code>type_annotation</code> structure is the same as their meaning in the <code>annotation</code> structure.

msg_attr_type_path = Wherever a type is used in a declaration or expression, the <code>type_path</code> structure identifies which part of the type is annotated.
msg_attr_type_path__path_length = The value of the <code>path_length</code> item gives the number of entries in the <code>path</code> array.
msg_attr_type_path__path = Each entry in the <code>path</code> array represents an iterative, left-to-right step towards the precise location of the annotation in an array type, nested type, or parameterized type. 
msg_attr_type_path__type_path_kind =The legal values for the <code>type_path_kind</code> item are listed bellow.<br/><br/><code>0</code> Annotation is deeper in an array type<br/><code>1</code> Annotation is deeper in a nested type<br/><code>2</code> Annotation is on the bound of a wildcard type argument of a parameterized type<br/><code>3</code> Annotation is on a type argument of a parameterized type<br/>
msg_attr_type_path__type_argument_index =If the value of the <code>type_path_kind</code> item is <code>0</code>, <code>1</code>, or <code>2</code>, then the value of the <code>type_argument_index</code> item is <code>0</code>.<br/><br/>If the value of the <code>type_path_kind</code> item is <code>3</code>, then the value of the <code>type_argument_index</code> item specifies which type argument of a parameterized type is annotated, where <code>0</code> indicates the first type argument of a parameterized type.

msg_attr_AnnotationDefault =The <code>AnnotationDefault</code> attribute is a variable-length attribute in the attributes table of certain method_info structures, namely those representing elements of annotation interfaces.<br/><br/>The <code>AnnotationDefault</code> attribute records the default value for the element represented by the <code>method_info</code> structure.<br/><br/>There may be at most one <code>AnnotationDefault</code> attribute in the attributes table of a <code>method_info</code> structure which represents an element of an annotation interface.
msg_attr_AnnotationDefault__default_value = The <code>default_value</code> item represents the default value of the annotation interface element represented by the <code>method_info</code> structure enclosing this <code>AnnotationDefault</code> attribute.

msg_attr_BootstrapMethods = The <code>BootstrapMethods</code> attribute is a variable-length attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure.<br/><br/>The <code>BootstrapMethods</code> attribute records bootstrap methods used to produce dynamically-computed constants and dynamically-computed call sites.<br/><br/>There must be exactly one <code>BootstrapMethods</code> attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure if the <code>constant_pool</code> table of the <code>ClassFile</code> structure has at least one <code>CONSTANT_Dynamic_info</code> or <code>CONSTANT_InvokeDynamic_info</code> entry.<br/><br/>There may be at most one <code>BootstrapMethods</code> attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure.
msg_attr_BootstrapMethods__num_bootstrap_methods = The value of the <code>num_bootstrap_methods</code> item determines the number of bootstrap method specifiers in the <code>bootstrap_methods</code> array.
msg_attr_bootstrap_methods = Each entry in the <code>bootstrap_methods</code> table contains an index to a <code>CONSTANT_MethodHandle_info</code> structure which specifies a bootstrap method, and a sequence (perhaps empty) of indexes to <code>static arguments</code> for the bootstrap method.
msg_attr_bootstrap_methods__bootstrap_method_ref = The value of the <code>bootstrap_method_ref</code> item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_MethodHandle_info</code> structure.
msg_attr_bootstrap_methods__num_bootstrap_arguments = The value of the <code>num_bootstrap_arguments</code> item gives the number of items in the <code>bootstrap_arguments</code> array.
msg_attr_bootstrap_methods__bootstrap_arguments = Each entry in the <code>bootstrap_arguments</code> array must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be loadable.

msg_attr_MethodParameters = The <code>MethodParameters</code> attribute is a variable-length attribute in the <code>attributes</code> table of a <code>method_info</code> structure.<br/><br/>A <code>MethodParameters</code> attribute records information about the formal parameters of a method, such as their names.<br/><br/>There may be at most one <code>MethodParameters</code> attribute in the <code>attributes</code> table of a <code>method_info</code> structure.
msg_attr_MethodParameters__parameters_count = The value of the <code>parameters_count</code> item indicates the number of parameter descriptors in the method descriptor referenced by the <code>descriptor_index</code> of the attribute's enclosing <code>method_info</code> structure.
msg_attr_parameters = Parameter item
msg_attr_parameters__name_index = The value of the <code>name_index</code> item must either be zero or a valid index into the <code>constant_pool</code> table.<br/><br/>If the value of the <code>name_index</code> item is <code>zero</code>, then this parameters element indicates a formal parameter with no name.<br/><br/>If the value of the <code>name_index</code> item is <code>nonzero</code>, the <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a valid unqualified name denoting a formal parameter.
msg_attr_parameters__access_flags =The value of the <code>access_flags</code> item is as follows:<br/><br/><code>0x0010 (ACC_FINAL)</code><br/>Indicates that the formal parameter was declared <code>final</code>.<br/><br/><code>0x1000 (ACC_SYNTHETIC)</code><br/>Indicates that the formal parameter was not explicitly or implicitly declared in source code, according to the specification of the language in which the source code was written. (The formal parameter is an implementation artifact of the compiler which produced this <code>class</code> file.)<br/><br/><code>0x8000 (ACC_MANDATED)</code><br/>Indicates that the formal parameter was implicitly declared in source code, according to the specification of the language in which the source code was written. (The formal parameter is mandated by a language specification, so all compilers for the language must emit it.)

msg_attr_Module = The <code>Module</code> attribute is a variable-length attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure.<br/><br/>The <code>Module</code> attribute indicates the modules required by a module; the packages exported and opened by a module; and the services used and provided by a module.<br/><br/>There may be at most one <code>Module</code> attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure.
msg_attr_module_name_index = The value of the <code>module_name_index</code> item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Module_info</code> structure denoting the current module.
msg_attr_module_flags = The value of the <code>module_flags</code> item is as follows:<br/><br/><code>0x0020 (ACC_OPEN)</code><br/>Indicates that this module is open.<br/><br/><code>0x1000 (ACC_SYNTHETIC)</code><br/>Indicates that this module was not explicitly or implicitly declared.<br/><br/><code>0x8000 (ACC_MANDATED)</code><br/>Indicates that this module was implicitly declared.
msg_attr_module_version_index = The value of the <code>module_version_index</code> item must be either zero or a valid index into the <code>constant_pool</code> table.<br/><br/>If the value of the item is <code>zero</code>, then no version information about the current module is present.<br/><br/>If the value of the item is <code>nonzero</code>, then the <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing the version of the current module.

msg_attr_requires_count = The value of the <code>requires_count</code> item indicates the number of entries in the <code>requires</code> table.<br/><br/>If the current module is <code>java.base</code>, then <code>requires_count</code> must be <code>zero</code>.<br/><br/>If the current module is not <code>java.base</code>, then <code>requires_count</code> must be at least <code>one</code>.
msg_attr_requires = Each entry in the <code>requires</code> table specifies a dependence of the current module.<br/><br/>Unless the current module is <code>java.base</code>, exactly one entry in the <code>requires</code> table must have both a <code>requires_index</code> item which indicates <code>java.base</code> and a <code>requires_flags</code> item which has the <code>ACC_SYNTHETIC</code> flag not set.
msg_attr_requires_index = The value of the <code>requires_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Module_info</code> structure denoting a module on which the current module depends.<br/><br/>At most one entry in the <code>requires</code> table may specify a module of a given name with its <code>requires_index</code> item.
msg_attr_requires_flags =The value of the <code>requires_flags</code> item is as follows:<br/><br/><code>0x0020 (ACC_TRANSITIVE)</code><br/>Indicates that any module which depends on the current module, implicitly declares a dependence on the module indicated by this entry.<br/><br/><code>0x0040 (ACC_STATIC_PHASE)</code><br/>Indicates that this dependence is mandatory in the static phase, i.e., at compile time, but is optional in the dynamic phase, i.e., at run time.<br/><br/><code>0x1000 (ACC_SYNTHETIC)</code><br/>Indicates that this dependence was not explicitly or implicitly declared in the source of the module declaration.<br/><br/><code>0x8000 (ACC_MANDATED)</code><br/>Indicates that this dependence was implicitly declared in the source of the module declaration.<br/><br/>If the current module is not <code>java.base</code>, and the class file version number is <code>54.0</code> or above, then neither <code>ACC_TRANSITIVE</code> nor <code>ACC_STATIC_PHASE</code> may be set in <code>requires_flags</code>.
msg_attr_requires_version_index =The value of the <code>requires_version_index</code> item must be either <code>zero</code> or a valid index into the <code>constant_pool</code> table.<br/><br/>If the value of the item is <code>zero</code>, then no version information about the dependence is present.<br/><br/>If the value of the item is <code>nonzero</code>, then the <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing the version of the module specified by <code>requires_index</code>.

msg_attr_exports_count = The value of the <code>exports_count</code> item indicates the number of entries in the <code>exports</code> table.
msg_attr_exports = Each entry in the <code>exports</code> table specifies a package exported by the current module, such that <code>public</code> and <code>protected</code> types in the package, and their <code>public</code> and <code>protected</code> members, may be accessed from outside the current module, possibly from a limited set of "friend" modules.
msg_attr_exports_index = The value of the <code>exports_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Package_info</code> structure representing a package exported by the current module.<br/><br/>At most one entry in the <code>exports</code> table may specify a package of a given name with its <code>exports_index</code> item.
msg_attr_exports_flags = The value of the <code>exports_flags</code> item is as follows:<br/><br/><code>0x1000 (ACC_SYNTHETIC)</code><br/>Indicates that this export was not explicitly or implicitly declared in the source of the module declaration.<br/><br/><code>0x8000 (ACC_MANDATED)</code><br/>Indicates that this export was implicitly declared in the source of the module declaration.<br/><br/>
msg_attr_exports_to_count = The value of the <code>exports_to_count</code> indicates the number of entries in the <code>exports_to_index</code> table.<br/><br/>If <code>exports_to_count</code> is <code>zero</code>, then this package is exported by the current module in an <code>unqualified</code> fashion; code in any other module may access the types and members in the package.<br/><br/>If <code>exports_to_count</code> is <code>nonzero</code>, then this package is exported by the current module in a <code>qualified</code> fashion; only code in the modules listed in the <code>exports_to_index</code> table may access the types and members in the package.
msg_attr_exports_to_index = The value of each entry in the <code>exports_to_index</code> table must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>aaa</code>CONSTANT_Module_info structure denoting a module whose code can access the types and members in this exported package.<br/><br/>For each entry in the <code>exports</code> table, at most one entry in its <code>exports_to_index</code> table may specify a module of a given name.

msg_attr_opens_count = The value of the <code>opens_count</code> item indicates the number of entries in the <code>opens</code> table.<br/><br/><code>opens_count</code> must be zero if the current module is open.
msg_attr_opens = Each entry in the <code>opens</code> table specifies a package opened by the current module, such that all types in the package, and all their members, may be accessed from outside the current module via the reflection libraries of the Java SE Platform, possibly from a limited set of "friend" modules.
msg_attr_opens_index = The value of the <code>opens_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Package_info</code> structure representing a package opened by the current module.<br/><br/>At most one entry in the opens table may specify a package of a given name with its <code>opens_index</code> item.
msg_attr_opens_flags = The value of the <code>aaa</code>opens_flags item is as follows:<br/><br/><code>0x1000 (ACC_SYNTHETIC)</code><br/>Indicates that this opening was not explicitly or implicitly declared in the source of the module declaration.<br/><br/><code>0x8000 (ACC_MANDATED)</code><br/>Indicates that this opening was implicitly declared in the source of the module declaration.<br/><br/>
msg_attr_opens_to_count = The value of the <code>opens_to_count</code> indicates the number of entries in the <code>opens_to_index</code> table.<br/><br/>If <code>opens_to_count</code> is <code>zero</code>, then this package is opened by the current module in an <code>unqualified</code> fashion; code in any other module may reflectively access the types and members in the package.<br/><br/>If <code>opens_to_count</code> is <code>nonzero</code>, then this package is opened by the current module in a <codequalifiedaaa</code> fashion; only code in the modules listed in the <code>exports_to_index</code> table may reflectively access the types and members in the package.
msg_attr_opens_to_index = The value of each entry in the <code>opens_to_index</code> table must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Module_info</code> structure denoting a module whose code can access the types and members in this opened package.<br/><br/>For each entry in the opens table, at most one entry in its <code>opens_to_index</code> table may specify a module of a given name.

msg_attr_uses_count = The value of the <code>uses_count</code> item indicates the number of entries in the <code>uses_index</code> table.
msg_attr_uses_index = The value of each entry in the <code>uses_index</code> table must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing a service interface which the current module may discover via <code>java.util.ServiceLoader</code>.<br/><br/>At most one entry in the <code>uses_index</code> table may specify a service interface of a given name.

msg_attr_provides_count = The value of the <code>provides_count</code> item indicates the number of entries in the <code>provides</code> table.
msg_attr_provides = Each entry in the <code>provides</code> table represents a service implementation for a given service interface.
msg_attr_provides_index = The value of the <code>provides_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing a service interface for which the current module provides a service implementation.<br/><br/>At most one entry in the <code>provides</code> table may specify a service interface of a given name with its <code>provides_index</code> item.
msg_attr_provides_with_count = The value of the <code>provides_with_count</code> indicates the number of entries in the <code>provides_with_index</code> table.<br/><br/><code>provides_with_count</code> must be nonzero.
msg_attr_provides_with_index = The value of each entry in the <code>provides_with_index</code> table must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing a service implementation for the service interface specified by <code>provides_index</code>.<br/><br/>For each entry in the <code>provides</code> table, at most one entry in its <code>provides_with_index</code> table may specify a service implementation of a given name.

msg_attr_ModulePackages = The <code>ModulePackages</code> attribute is a variable-length attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure.<br/><br/>The <code>ModulePackages</code> attribute indicates all the packages of a module that are exported or opened by the <code>Module</code> attribute, as well as all the packages of the service implementations recorded in the <code>Module</code> attribute.<br/><br/>The <code>ModulePackages</code> attribute may also indicate packages in the module that are neither exported nor opened nor contain service implementations.<br/><br/>There may be at most one <code>ModulePackages</code> attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure.
msg_attr_ModulePackages__package_count = The value of the <code>package_count</code> item indicates the number of entries in the <code>package_index</code> table.
msg_attr_ModulePackages__package_index = The value of each entry in the <code>package_index</code> table must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Package_info</code> structure representing a package in the current module.<br/><br/>At most one entry in the <code>package_index</code> table may specify a package of a given name.

msg_attr_ModuleMainClass = The <code>ModuleMainClass</code> attribute is a fixed-length attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure.<br/><br/>The <code>ModuleMainClass</code> attribute indicates the main class of a module.<br/><br/>There may be at most one <code>ModuleMainClass</code> attribute in the attributes table of a <code>ClassFile</code> structure.
msg_attr_ModuleMainClass__main_class_index = The value of the <code>main_class_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing the main class of the current module.

msg_attr_NestHost = The <code>NestHost</code> attribute is a fixed-length attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure.<br/><br/>The <code>NestHost</code> attribute records the nest host of the nest to which the current class or interface claims to belong.<br/><br/>There may be at most one <code>NestHost</code> attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure.
msg_attr_NestHost__host_class_index = The value of the <code>host_class_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing a class or interface which is the nest host for the current class or interface.

msg_attr_NestMembers = The <code>NestMembers</code> attribute is a variable-length attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure.<br/><br/>The <code>NestMembers</code> attribute records the classes and interfaces that are authorized to claim membership in the nest hosted by the current class or interface.<br/><br/>There may be at most one <code>NestMembers</code> attribute in the <code>attributes</code> table of a <code>ClassFile</code> structure.<br/><br/>The <code>attributes</code> table of a <code>ClassFile</code> structure must not contain both a <code>NestMembers</code> attribute and a <code>NestHost</code> attribute.
msg_attr_NestMembers__number_of_classes = The value of the <code>number_of_classes</code> item indicates the number of entries in the <code>classes</code> array.
msg_attr_NestMembers__classes = Each value in the <code>classes</code> array must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing a class or interface which is a member of the nest hosted by the current class or interface.

msg_attr_Record = The <code>Record</code> attribute is a variable-length attribute in the attributes table of a <code>ClassFile</code> structure. The <code>Record</code> attribute indicates that the current class is a record class, and stores information about the record components of the record class. <br/><br/>There may be at most one Record attribute in the attributes table of a <code>ClassFile</code> structure.
msg_attr_Record__components_count = The value of the <code>components_count</code> item indicates the number of entries in the <code>components</code> table.
msg_attr_record_component_info = Each entry in the components table specifies a record component of the current class, in the order the record components were declared.
msg_attr_record_component_info__name_index = The value of the <code>name_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info_pool</code> structure representing a valid unqualified name denoting the record component.
msg_attr_record_component_info__descriptor_index = The value of the <code>descriptor_index</code> item must be a valid index into the <code>constant_pool</code> table.<br/><br/>The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Utf8_info_pool</code> structure representing a field descriptor which encodes the type of the record component.
msg_attr_record_component_info__attributes_count = The value of the <code>attributes_count</code> item indicates the number of additional attributes of this record component.
msg_attr_record_component_info__attributes = Each value of the <code>attributes</code> table must be an <code>attribute_info</code> structure.<br/><br/>A record component can have any number of optional attributes associated with it.

msg_attr_Bridge = This is an legacy JVM attribute will not exist in new compied codes.<br/><br/>The Bridge attribute is used to indicate a bridge method generated by a compiler for the Java programming language.
msg_attr_ModuleHashes = This is an legacy JVM attribute in OpenJDK 9.
msg_attr_ModuleTarget = This is an legacy JVM attribute in OpenJDK 9.
msg_attr_ModuleResolution = This is an new JVM attribute may exist in OpenJDK 17.
msg_attr_PermittedSubclasses = This is an new JVM attribute may exist in OpenJDK 17.
msg_attr_Unrecognized = This is an Unrecognized JVM attribute, usually created by customized compiler or other JVM languages.
msg_attr_NoneJVM = This is an customized attribute did not specified in The Java Virtual Machine Specification.