# Copyright 2021 Free Internals.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

msg_magic = The magic item supplies the magic number identifying the <code>class</code> file format; it has the value <code>0xCAFEBABE</code>.
msg_version = The values of the <code>minor_version</code> and <code>major_version</code> items are the minor and major version numbers of this <code>class</code> file. Together, a major and a minor version number determine the version of the <code>class</code> file format. If a <code>class</code> file has major version number <code>M</code> and minor version number <code>m</code>, we denote the version of its class file format as <code>M.m</code>.
msg_constant_pool_count = The value of the <code>constant_pool_count</code> item is equal to the number of entries in the <code>constant_pool</code> table plus one. A <code>constant_pool</code> index is considered valid if it is greater than zero and less than <code>constant_pool_count</code>, with the exception for constants of type <code>long</code> and <code>double</code>.
msg_constant_pool_table = The <code>constant_pool</code> is a table of structures representing various string constants, class and interface names, field names, and other constants that are referred to within the <code>ClassFile</code> structure and its substructures. The format of each <code>constant_pool</code> table entry is indicated by its first "<code>tag</code>" byte.<br/><br/>The <code>constant_pool</code> table is indexed from <code>1</code> to <code>constant_pool_count - 1</code>.
msg_cp_tag = A 1-byte <code>tag</code> indicating the kind of constant denoted by the entry.
msg_cp_empty = All 8-byte constants take up two entries in the <code>constant_pool</code> table of the class file. If a <code>CONSTANT_Long_info</code> or <code>CONSTANT_Double_info</code> structure is the entry at index <code>n</code> in the <code>constant_pool</code> table, then the next usable entry in the table is located at index <code>n+2</code>. The constant_pool index <code>n+1</code> must be valid but is considered unusable.<br/><br/>In retrospect, making 8-byte constants take two constant pool entries was a poor choice.
msg_access_flags = The value of the <code>access_flags</code> item is a mask of flags used to denote access permissions to and properties of this class or interface.
msg_this_class = The value of the <code>this_class</code> item must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing the <code>class</code> or <code>interface</code> defined by this <code>class</code> file.
msg_super_class = For a class, the value of the <code>super_class</code> item either must be <code>zero</code> or must be a valid index into the <code>constant_pool</code> table. If the value of the <code>super_class</code> item is nonzero, the <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing the direct superclass of the class defined by this <code>class</code> file. Neither the direct superclass nor any of its superclasses may have the <code>ACC_FINAL</code> flag set in the <code>access_flags</code> item of its <code>ClassFile</code> structure.<br/><br/> If the value of the <code>super_class</code> item is zero, then this <code>class</code> file must represent the class <code>Object</code>, the only class or interface without a direct superclass.<br/><br/>For an interface, the value of the <code>super_class</code> item must always be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at that index must be a <code>CONSTANT_Class_info</code> structure representing the class <code>Object</code>.

msg_interfaces_count = The value of the <code>interfaces_count</code> item gives the number of direct <code>super interfaces</code> of this class or interface type.
msg_interfaces_table = Each value in the <code>interfaces</code> array must be a valid index into the <code>constant_pool</code> table. The <code>constant_pool</code> entry at each value of <code>interfaces[i]</code>, where <code>0 \u2264 i < interfaces_count</code>, must be a <code>CONSTANT_Class_info</code> structure representing an interface that is a direct super interface of this class or interface type, in the left-to-right order given in the source for the type.
msg_fields_count = The value of the <code>fields_count</code> item gives the number of <code>field_info</code> structures in the <code>fields</code> table. The <code>field_info</code> structures represent all fields, both class variables and instance variables, declared by this class or interface type.
msg_fields_table = Each value in the <code>fields</code> table must be a <code>field_info</code> structure giving a complete description of a field in this class or interface. The <code>fields</code> table includes only those fields that are declared by this class or interface. It does not include items representing fields that are inherited from superclasses or super interfaces.
msg_methods_count = The value of the <code>methods_count</code> item gives the number of <code>method_info</code> structures in the <code>methods</code> table.
msg_methods_table =  Each value in the <code>methods</code> table must be a <code>method_info</code> structure giving a complete description of a method in this class or interface. If neither of the <code>ACC_NATIVE</code> and <code>ACC_ABSTRACT</code> flags are set in the <code>access_flags</code> item of a <code>method_info</code> structure, the Java Virtual Machine instructions implementing the method are also supplied.<br/><br/>The <code>method_info</code> structures represent all methods declared by this class or interface type, including instance methods, class methods, instance initialization methods, and any class or interface initialization method. The methods table does not include items representing methods that are inherited from super classes or super interfaces.
msg_attributes_count = The value of the <code>attributes_count</code> item gives the number of attributes in the <code>attributes</code> table of this class.
msg_attributes_table =  Each value of the <code>attributes</code> table must be an <code>attribute_info</code> structure.

# Constants
msg_const_class_name_index = The value of the name_index item must be a valid index into the constant_pool table. The constant_pool entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a valid binary class or interface name encoded in internal form.
msg_const_ref_class_index =  The value of the class_index item must be a valid index into the constant_pool table. The constant_pool entry at that index must be a <code>CONSTANT_Class_info</code> structure representing a class or interface type that has the field or method as a member.
msg_const_ref_name_and_type_index =  The value of the name_and_type_index item must be a valid index into the constant_pool table. The constant_pool entry at that index must be a <code>CONSTANT_NameAndType_info</code> structure. This constant_pool entry indicates the name and descriptor of the field or method.
msg_const_string_string_index =  The value of the string_index item must be a valid index into the constant_pool table. The constant_pool entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing the sequence of Unicode code points to which the String object is to be initialized.
msg_const_int_bytes = The bytes item of the <code>CONSTANT_Integer_info</code> structure represents the value of the int constant. The bytes of the value are stored in big-endian (high byte first) order.
msg_const_float_bytes = The bytes item of the <code>CONSTANT_Float_info</code> structure represents the value of the float constant in IEEE 754 binary32 floating-point format. The bytes of the item are stored in big-endian (high byte first) order.
msg_const_long_bytes = The unsigned high_bytes and low_bytes items of the <code>CONSTANT_Long_info</code> structure together represent the value of the long constant, where the bytes of each of <code>high_bytes</code> and <code>low_bytes</code> are stored in big-endian (high byte first) order.
msg_const_double_bytes = The high_bytes and low_bytes items of the <code>CONSTANT_Double_info</code> structure together represent the double value in IEEE 754 binary64 floating-point format. The bytes of each item are stored in big-endian (high byte first) order.
msg_const_nameandtype_name_index = The value of the name_index item must be a valid index into the constant_pool table. The constant_pool entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing either a valid unqualified name denoting a field or method, or the special method name <init>.
msg_const_nameandtype_descriptor_index = The value of the descriptor_index item must be a valid index into the constant_pool table. The constant_pool entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a valid field descriptor or method descriptor.
msg_const_utf8_length = The value of the length item gives the number of bytes in the bytes array (not the length of the resulting string).
msg_const_utf8_bytes = The bytes array contains the bytes of the string.<br/><br/>String content is encoded in modified UTF-8. Modified UTF-8 strings are encoded so that code point sequences that contain only non-null ASCII characters can be represented using only 1 byte per code point, but all code points in the Unicode codespace can be represented. Modified UTF-8 strings are not null-terminated.
msg_const_methodhandle_reference_kind = The value of the reference_kind item must be in the range 1 to 9. The value denotes the kind of this method handle, which characterizes its bytecode behavior.
msg_const_methodhandle_reference_index = The value of the reference_index item must be a valid index into the constant_pool table.
msg_const_methodtype_descriptor_index = The value of the descriptor_index item must be a valid index into the constant_pool table. The constant_pool entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a method descriptor.
msg_const_dynamic_bootstrap_method_attr_index = The value of the bootstrap_method_attr_index item must be a valid index into the bootstrap_methods array of the bootstrap method table of this class file.
msg_const_dynamic_name_and_type_index =  The value of the name_and_type_index item must be a valid index into the constant_pool table. The constant_pool entry at that index must be a <code>CONSTANT_NameAndType_info</code> structure. This constant_pool entry indicates a name and descriptor.
msg_const_module_name_index = The value of the name_index item must be a valid index into the constant_pool table. The constant_pool entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a valid module name.
msg_const_package_name_index = The value of the name_index item must be a valid index into the constant_pool table. The constant_pool entry at that index must be a <code>CONSTANT_Utf8_info</code> structure representing a valid package name encoded in internal form.

# Attributes
msg_record_attribute = The Record attribute is a variable-length attribute in the attributes table of a ClassFile structure. The Record attribute indicates that the current class is a record class, and stores information about the record components of the record class. <br/><br/>There may be at most one Record attribute in the attributes table of a ClassFile structure.
msg_record_component_info = Each entry in the components table specifies a record component of the current class, in the order the record components were declared.